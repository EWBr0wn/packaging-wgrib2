name: New buildx Docker Image CI

on:
  push:
    branches:
      - main
      - refactor-docker-build  
    paths-ignore:
      - .github/workflows/*.yml
  pull_request:
    branches:
      - main
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
    ## Gleaned from https://docs.docker.com/build/ci/github-actions/local-registry/
    docker-registry:
      runs-on: ubuntu-latest
      services:
        registry:
          image: registry:2
          ports:
            - 5000:5000
      steps:
        - name: Checkout
          uses: actions/checkout@v3
              
        - name: Cache Docker registry
          id: cache-registry
          uses: actions/cache@v1.2.1
          with:
            path: |
              /var/lib/docker-registry
            # Key is named differently to avoid collision
            key: ${{ runner.os }}-al2-registry-${{ github.job }}
            restore-keys: |
              ${{ runner.os }}-al2-registry

    foundation:
        runs-on: ubuntu-latest
        services:
          registry:
            image: registry:2
            ports:
              - 5000:5000
        needs: 
          - docker-registry
        steps:
          - name: Checkout
            uses: actions/checkout@v3

          - name: Cache Docker registry
            id: cache-registry
            uses: actions/cache@v1.2.1
            with:
              path: |
                /var/lib/docker-registry
              # Key is named differently to avoid collision
              key: ${{ runner.os }}-al2-registry-${{ github.job }}
              restore-keys: |
                ${{ runner.os }}-al2-registry
                  
          - name: Cache downloaded software
            uses: actions/cache@v1.2.1
            with:
              path: |
                ${{ env.GITHUB_WORKSPACE }}/3rd-party/*
              # Key is named differently to avoid collision
              key: ${{ runner.os }}-al2-3rd-party
              restore-keys: |
                ${{ runner.os }}-al2-3rd-party
                  
          - name: Setup Docker Buildx
            id: buildx
            uses: docker/setup-buildx-action@v2.7.0
            with:
              driver-opts: network=host

          - name: Cache Docker layers
            id: cache-foundation
            uses: actions/cache@v1.2.1
            with:
              path: |
                /tmp/.buildx-cache
              # Key is named differently to avoid collision
              key: ${{ runner.os }}-al2-buildx-${{ github.job }}
              restore-keys: |
                ${{ runner.os }}-al2-buildx
                  
          - name: debug
            #if: steps.cache-foundation.outputs.cache-hit != 'true'
            run: |
              pwd
              echo "List current directory:" && ls -lah && echo
              echo "List 3rd-party directory:" && ls -lah 3rd-party && echo
              echo "List buildx-cache directories:" && ls -lah /tmp/.buildx-cache* && echo
              ls -lah /tmp/.buildx-cache*/{blobs,ingest}/sha256 && echo
              echo "Diff buildx-cache directories:"
              if [ -d /tmp/.buildx-cache-new ] ; then
                diff -r --brief /tmp/.buildx-cache /tmp/.buildx-cache-new
              else
                echo
              fi
              df -h
                
          - name: Download cmake
            #if: steps.cache-foundation.outputs.cache-hit != 'true'
            run: |
              make 3rd-party/cmake.tgz
            
          - name: debug
            #if: steps.cache-foundation.outputs.cache-hit != 'true'
            run: |
              pwd
              echo "List current directory:" && ls -lah && echo
              echo "List 3rd-party directory:" && ls -lah 3rd-party && echo
              df -h
                
          - name: Build foundation image
            uses: docker/build-push-action@v4.1.1
            with:
              context: .
              builder: ${{ steps.buildx.outputs.name }}
              file: Dockerfile
              # Set the desired build target here
              target: foundation
              push: true
              tags: localhost:5000/foundation:latest
              #tags: ${{ steps.prep.outputs.tagged_image }}
              cache-from: type=local,src=/tmp/.buildx-cache
              # Note the mode=max here
              # More: https://github.com/moby/buildkit#--export-cache-options
              # And: https://github.com/docker/buildx#--cache-tonametypetypekeyvalue
              cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-new
                
          - name: Debug docker
            #if: steps.cache-foundation.outputs.cache-hit != 'true'
            run: |
              echo "Docker ps output:" && docker ps -a && echo
              echo "Docker buildx ls output:" && docker buildx ls && echo
              echo "Docker images output:" && docker images --all && echo
              ## Gleaned from https://stackoverflow.com/questions/31251356/how-to-get-a-list-of-images-on-docker-registry-v2
              echo "List images in docker registry:" && curl -X GET https://localhost:5000/v2/_catalog | jq . && echo
              echo "List buildx-cache directories:" && ls -lah /tmp/.buildx-cache* && echo
              ls -lah /tmp/.buildx-cache*/{blobs,ingest}/sha256 && echo
              echo "Diff buildx-cache directories:"
              if [ -d /tmp/.buildx-cache-new ] ; then
                diff -r --brief /tmp/.buildx-cache /tmp/.buildx-cache-new
              fi
                
          - name: Move cache
            run: |
              rm -rf /tmp/.buildx-cache
              mv -v /tmp/.buildx-cache-new /tmp/.buildx-cache
            
          - name: Inspect foundation
            run: |
              docker buildx imagetools inspect localhost:5000/foundation:latest

          - name: Extract from Docker image
            uses: shrink/actions-docker-extract@v2
            with:
              image: "localhost:5000/foundation"
              path: "cmake-*"  # file or directory you want out

          - name: Debug directory in docker
            run: |
              echo "Directory:" && pwd && echo
              # Not what you want... rebuilding the image is not the correct answer
              # docker buildx build --output type=docker,name=localhost:5000/foundation:latest .
              # Again, Not what you want... rebuilding the image is not the correct answer
              # docker build --target=foundation --output type=local,dest=$(pwd)/foundation/ .
              # docker exec -i localhost:5000/foundation:latest 'ls -laR'
              # docker run --rm -i localhost:5000/foundation:latest 'uname -a && pwd && ls -laRh && exit'
              # echo "Directory list:" && ls -laR && echo
              # echo "Directory /tmp list:" && ls -laRh /tmp && echo

          - name: Upload a Build Artifact
            uses: actions/upload-artifact@v3.1.2
            with:
              # Artifact name
              name: cmake-3.19.8-build # optional, default is artifact
              # A file, directory or wildcard pattern that describes what to upload
              path: cmake-3.19.8
              # The desired behavior if no files are found using the provided path.
              # Available Options:
              #   warn: Output a warning but do not fail the action
              #   error: Fail the action with an error message
              #   ignore: Do not output any warnings or errors, the action does not fail
              if-no-files-found: ignore # optional, default is warn
              # Duration after which artifact will expire in days. 0 means using default retention.
              # Minimum 1 day. Maximum 90 days unless changed from the repository settings page.
              # retention-days: # optional
    
    lambda-base:
        runs-on: ubuntu-latest
        services:
          registry:
            image: registry:2
            ports:
              - 5000:5000
        needs: 
            - docker-registry
        steps:
            - name: Checkout
              uses: actions/checkout@v3
              
            - name: Cache Docker registry
              id: cache-registry
              uses: actions/cache@v1.2.1
              with:
                path: |
                 /var/lib/docker-registry
                # Key is named differently to avoid collision
                key: ${{ runner.os }}-al2-registry-${{ github.job }}
                restore-keys: |
                  ${{ runner.os }}-al2-registry
                  
            - name: Cache downloaded software
              uses: actions/cache@v1.2.1
              with:
                path: |
                  ${{ env.GITHUB_WORKSPACE }}/3rd-party/*
                # Key is named differently to avoid collision
                key: ${{ runner.os }}-al2-3rd-party
                restore-keys: |
                  ${{ runner.os }}-al2-3rd-party
                  
            - name: Setup Docker Buildx
              id: buildx
              uses: docker/setup-buildx-action@v2.7.0
              with:
                driver-opts: network=host

            - name: Cache Docker layers
              id: cache-lambda-base
              uses: actions/cache@v1.2.1
              with:
                path: |
                  /tmp/.buildx-cache
                # Key is named differently to avoid collision
                key: ${{ runner.os }}-al2-buildx-${{ github.job }}
                restore-keys: |
                  ${{ runner.os }}-al2-buildx
                  
            - name: Debug docker
              #if: steps.cache-foundation.outputs.cache-hit != 'true'
              run: |
                echo "Docker ps output:" && docker ps -a && echo
                echo "Docker buildx ls output:" && docker buildx ls && echo

            - name: Build lambda-base image
              uses: docker/build-push-action@v4.1.1
              with:
                context: .
                builder: ${{ steps.buildx.outputs.name }}
                file: Dockerfile
                # Set the desired build target here
                target: lambda-base
                push: true
                tags: localhost:5000/lambda-base:latest
                # tags: ${{ steps.prep.outputs.tagged_image }}
                cache-from: type=local,src=/tmp/.buildx-cache
                # Note the mode=max here
                # More: https://github.com/moby/buildkit#--export-cache-options
                # And: https://github.com/docker/buildx#--cache-tonametypetypekeyvalue
                cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-new

            - name: Debug docker
              #if: steps.cache-foundation.outputs.cache-hit != 'true'
              run: |
                echo "Docker ps output:" && docker ps -a && echo
                echo "Docker buildx ls output:" && docker buildx ls && echo
                echo "Docker images output:" && docker images --all && echo
                
            - name: Move cache
              run: |
                rm -rf /tmp/.buildx-cache
                mv -v /tmp/.buildx-cache-new /tmp/.buildx-cache
            
            - name: Inspect lambda-base
              run: |
                docker buildx imagetools inspect localhost:5000/lambda-base:latest

    builder:
        runs-on: ubuntu-latest
        services:
          registry:
            image: registry:2
            ports:
              - 5000:5000
        needs: 
            - foundation
        steps:
            - name: Checkout
              uses: actions/checkout@v3
              
            - name: Cache Docker registry
              id: cache-registry
              uses: actions/cache@v1.2.1
              with:
                path: |
                 /var/lib/docker-registry
                # Key is named differently to avoid collision
                key: ${{ runner.os }}-al2-registry-${{ github.job }}
                restore-keys: |
                  ${{ runner.os }}-al2-registry
                  
            - name: Cache downloaded software
              uses: actions/cache@v1.2.1
              with:
                path: |
                  ${{ env.GITHUB_WORKSPACE }}/3rd-party/*
                # Key is named differently to avoid collision
                key: ${{ runner.os }}-al2-3rd-party
                restore-keys: |
                  ${{ runner.os }}-al2-3rd-party
                  
            - name: Setup Docker Buildx
              id: buildx
              uses: docker/setup-buildx-action@v2.7.0
              with:
                driver-opts: network=host

            - name: Cache Docker layers
              id: cache-builder
              uses: actions/cache@v1.2.1
              with:
                path: |
                  /tmp/.buildx-cache
                # Key is named differently to avoid collision
                key: ${{ runner.os }}-al2-buildx-${{ github.job }}
                restore-keys: |
                  ${{ runner.os }}-al2-buildx
                                
            - name: debug
              run: |
                pwd
                echo "List current directory:" && ls -lah && echo
                echo "List 3rd-party directory:" && ls -lah 3rd-party && echo
                echo "List buildx-cache directories:" && ls -lah /tmp/.buildx-cache* && echo
                ls -lah /tmp/.buildx-cache*/{blobs,ingest}/sha256 && echo
                echo "Diff buildx-cache directories:"
                if [ -d /tmp/.buildx-cache-new ] ; then
                  diff -r --brief /tmp/.buildx-cache /tmp/.buildx-cache-new
                else
                  echo
                fi
                df -h
          
            - name: Debug docker
              #if: steps.cache-foundation.outputs.cache-hit != 'true'
              run: |
                echo "Docker ps output:" && docker ps -a && echo
                echo "Docker buildx ls output:" && docker buildx ls && echo
                echo "Docker images output:" && docker images --all && echo
                
            - name: Download wgrib2
              #if: steps.cache-builder.outputs.cache-hit != 'true'
              run: |
                make 3rd-party/wgrib2.tgz

            - name: Inspect foundation
              run: |
                docker buildx imagetools inspect localhost:5000/foundation:latest
                
            - name: Build builder image
              uses: docker/build-push-action@v4.1.1
              with:
                context: .
                builder: ${{ steps.buildx.outputs.name }}
                file: Dockerfile
                # Set the desired build target here
                target: builder
                push: true
                tags: localhost:5000/builder:latest
                #tags: ${{ steps.prep.outputs.tagged_image }}
                cache-from: type=local,src=/tmp/.buildx-cache
                # Note the mode=max here
                # More: https://github.com/moby/buildkit#--export-cache-options
                # And: https://github.com/docker/buildx#--cache-tonametypetypekeyvalue
                cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-new

            - name: Debug docker
              #if: steps.cache-foundation.outputs.cache-hit != 'true'
              run: |
                echo "Docker ps output:" && docker ps -a && echo
                echo "Docker buildx ls output:" && docker buildx ls && echo
                echo "Docker images output:" && docker images --all && echo
                
            - name: Move cache
              run: |
                rm -rf /tmp/.buildx-cache
                mv -v /tmp/.buildx-cache-new /tmp/.buildx-cache
            
            - name: Inspect foundation
              run: |
                docker buildx imagetools inspect localhost:5000/foundation:latest

            - name: Inspect builder
              run: |
                docker buildx imagetools inspect localhost:5000/builder:latest

    lambda-wgrib2:
        runs-on: ubuntu-latest
        services:
          registry:
            image: registry:2
            ports:
              - 5000:5000
        needs:
            - lambda-base
            - builder
        steps:
            - name: Checkout
              uses: actions/checkout@v3
              
            - name: Cache Docker registry
              id: cache-registry
              uses: actions/cache@v1.2.1
              with:
                path: |
                 /var/lib/docker-registry
                # Key is named differently to avoid collision
                key: ${{ runner.os }}-al2-registry-${{ github.job }}
                restore-keys: |
                  ${{ runner.os }}-al2-registry
                  
            - name: Cache downloaded software
              uses: actions/cache@v1.2.1
              with:
                path: |
                  ${{ env.GITHUB_WORKSPACE }}/3rd-party/*
                # Key is named differently to avoid collision
                key: ${{ runner.os }}-al2-3rd-party
                restore-keys: |
                  ${{ runner.os }}-al2-3rd-party
                  
            - name: Setup Docker Buildx
              id: buildx
              uses: docker/setup-buildx-action@v2.7.0
              with:
                driver-opts: network=host

            - name: Cache Docker layers
              uses: actions/cache@v1.2.1
              with:
                path: |
                  /tmp/.buildx-cache
                # Key is named differently to avoid collision
                key: ${{ runner.os }}-al2-buildx-${{ github.job }}
                restore-keys: |
                  ${{ runner.os }}-al2-buildx

            - name: Build lambda-wgrib2 image
              uses: docker/build-push-action@v4.1.1
              with:
                context: .
                builder: ${{ steps.buildx.outputs.name }}
                file: Dockerfile
                # Set the desired build target here
                target: lambda-wgrib2
                push: true
                tags: localhost:5000/lambda-wgrib2:latest
                #tags: ${{ steps.prep.outputs.tagged_image }}
                cache-from: type=local,src=/tmp/.buildx-cache
                # Note the mode=max here
                # More: https://github.com/moby/buildkit#--export-cache-options
                # And: https://github.com/docker/buildx#--cache-tonametypetypekeyvalue
                cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-new

            - name: Move cache
              run: |
                rm -rf /tmp/.buildx-cache
                mv -v /tmp/.buildx-cache-new /tmp/.buildx-cache
                     
            - name: Inspect foundation
              run: |
                docker buildx imagetools inspect localhost:5000/foundation:latest
            
            - name: Inspect lambda-base
              run: |
                docker buildx imagetools inspect localhost:5000/lambda-base:latest

            - name: Inspect builder
              run: |
                docker buildx imagetools inspect localhost:5000/builder:latest
                
            - name: Inspect lambda-wgrib2
              run: |
                docker buildx imagetools inspect localhost:5000/lambda-wgrib2:latest

    lambda-pywgrib2:
        runs-on: ubuntu-latest
        services:
          registry:
            image: registry:2
            ports:
              - 5000:5000
        needs:
            - builder
        steps:
            - name: Checkout
              uses: actions/checkout@v3
              
            - name: Cache Docker registry
              id: cache-registry
              uses: actions/cache@v1.2.1
              with:
                path: |
                 /var/lib/docker-registry
                # Key is named differently to avoid collision
                key: ${{ runner.os }}-al2-registry-${{ github.job }}
                restore-keys: |
                  ${{ runner.os }}-al2-registry
                  
            - name: Cache downloaded software
              uses: actions/cache@v1.2.1
              with:
                path: |
                  ${{ env.GITHUB_WORKSPACE }}/3rd-party/*
                # Key is named differently to avoid collision
                key: ${{ runner.os }}-al2-3rd-party
                restore-keys: |
                  ${{ runner.os }}-al2-3rd-party
                  
            - name: Setup Docker Buildx
              id: buildx
              uses: docker/setup-buildx-action@v2.7.0
              with:
                driver-opts: network=host

            - name: Cache Docker layers
              uses: actions/cache@v1.2.1
              with:
                path: |
                  /tmp/.buildx-cache
                  ./3rd-party/pywgrib2_s.py
                # Key is named differently to avoid collision
                key: ${{ runner.os }}-al2-buildx-${{ github.job }}
                restore-keys: |
                  ${{ runner.os }}-al2-buildx

            - name: Download pywgrib2_s.py
              #if: steps.cache-builder.outputs.cache-hit != 'true'
              run: |
                make 3rd-party/pywgrib2_s.py

            - name: Build lambda-pywgrib2 image
              uses: docker/build-push-action@v4.1.1
              with:
                context: .
                builder: ${{ steps.buildx.outputs.name }}
                file: Dockerfile
                # Set the desired build target here
                target: lambda-pywgrib2
                push: true
                tags: localhost:5000/lambda-pywgrib2:latest
                #tags: ${{ steps.prep.outputs.tagged_image }}
                cache-from: type=local,src=/tmp/.buildx-cache
                # Note the mode=max here
                # More: https://github.com/moby/buildkit#--export-cache-options
                # And: https://github.com/docker/buildx#--cache-tonametypetypekeyvalue
                cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-new

            - name: Move cache
              run: |
                rm -rf /tmp/.buildx-cache
                mv -v /tmp/.buildx-cache-new /tmp/.buildx-cache
