name: New buildx Docker Image CI

on:
  push:
    branches:
      - main
    paths-ignore:
      - .github/workflows/*.yml
  pull_request:
    branches:
      - main
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

## Gleaned from https://yonatankra.com/7-github-actions-tricks-i-wish-i-knew-before-i-started/#6_Saving_Computation_Time_by_Stopping_Obsolete_Workflows
concurrency:
  group: ci-tests-${{ github.ref }}-1
  cancel-in-progress: true

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io

jobs:
    ## Gleaned from https://docs.docker.com/build/ci/github-actions/local-registry/
    #
    ## Look at https://github.com/actions/cache/blob/f5ce41475b483ad7581884324a6eca9f48f8dcc7/.github/workflows/workflow.yml#L117
    ## for ideas on name based reference
  docker-registry:
    runs-on: ubuntu-latest
    services:
      registry-service:
        image: registry:2
        ports:
          - 5000:5000
    #    volumes:
    #      ## Ick: Need a directory that exists before "everything"
    #      # Gleaned from https://github.com/actions/runner-images/blob/main/docs/create-image-and-azure-resources.md
    #      # Does NOT work because /usr/bin/tar returns error when referenced.
    #      - /opt/post-generation:/var/lib/registry
    steps:
    #  - name: Checkout
    #    uses: actions/checkout@v3

      - name: debug directory listing
        run: |
          echo ${{ github.workspace }}
          ls -lh ${{ github.workspace }}
          echo /opt/post-generation
          ls -lh /opt/post-generation
          echo ${{ runner.temp }}
          ls -lh ${{ runner.temp }}
          echo /home/runner/work
          ls -lah /home/runner/work
          echo /home/runner/{.cargo,.composer,.config,.docker,factory,runners,warmup}
          ls -lah /home/runner/{.cargo,.composer,.config,.docker,factory,runners,warmup}
          # could use /home/runner/factory, but checking out /home
          echo /home
          ls -lah /home

      - name: Cache Docker registry
        if: 'false'
        id: cache-registry
        uses: actions/cache@v3.3.1
        with:
          path: |
            /opt/post-generation
            ${{ github.workspace }}/docker-registry
          # Key is named differently to avoid collision
          key: ${{ runner.os }}-al2-registry-${{ github.job }}
          restore-keys: |
            ${{ runner.os }}-al2-registry

  foundation:
    runs-on: ubuntu-latest
    services:
      registry-service:
        image: registry:2
        ports:
          - 5000:5000
    #    volumes:
    #      - /opt/post-generation:/var/lib/registry
    needs: 
      - docker-registry
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: debug directory listing
        run: |
          echo ${{ github.workspace }}
          ls -lh ${{ github.workspace }}
          echo ${{ runner.temp }}
          ls -lh ${{ runner.temp }}

      - name: Cache Docker registry
        if: 'false'
        id: cache-registry
        uses: actions/cache@v3.3.1
        with:
          path: |
            /opt/post-generation
            ${{ github.workspace }}/docker-registry
          # Key is named differently to avoid collision
          key: ${{ runner.os }}-al2-registry-${{ github.job }}
          restore-keys: |
            ${{ runner.os }}-al2-registry

      - name: Cache downloaded software
        id: cache-3rd-party
        uses: actions/cache@v3.3.1
        with:
          path: |
            ${{ github.workspace }}/3rd-party/*
          # Key is named differently to avoid collision
          key: ${{ runner.os }}-al2-3rd-party
          restore-keys: |
            ${{ runner.os }}-al2-3rd-party

      - name: Setup Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2.7.0
        with:
          driver-opts: network=host
          buildkitd-flags: --debug

      - name: Cache Docker layers
        id: cache-foundation
        uses: actions/cache@v3.3.1
        with:
          path: |
            ${{ runner.temp }}/.buildx-cache
          # Key is named differently to avoid collision
          key: ${{ runner.os }}-al2-buildx-${{ github.job }}
          restore-keys: |
            ${{ runner.os }}-al2-buildx

      - name: debug
        if: 'false'
        run: |
          echo "Current directory:" && pwd && echo
          echo "List current directory:" && ls -lah && echo
          echo "List 3rd-party directory:" && ls -lah 3rd-party && echo
          echo "List buildx-cache directories:" && ls -lah /tmp/.buildx-cache* && echo
          ls -lah /tmp/.buildx-cache*/{blobs,ingest}/sha256 && echo
          echo "Diff buildx-cache directories:"
          if [ -d /tmp/.buildx-cache-new ] ; then
            diff -r --brief /tmp/.buildx-cache /tmp/.buildx-cache-new
          else
            echo
          fi
          df -h

      - name: Download cmake
        if: steps.cache-3rd-party.outputs.cache-hit != 'true'
        run: |
          if [ ! -f 3rd-party/cmake.tgz ] ; then
            make 3rd-party/cmake.tgz
          fi

      - name: Upload cmake.tgz
        uses: actions/upload-artifact@v3.1.2
        with:
          name: cached-cmake.tgz
          path: 3rd-party/cmake.tgz

      - name: debug
        if: 'true'
        run: |
          pwd
          echo "List current directory:" && ls -lah && echo
          echo "List 3rd-party directory:" && ls -lah 3rd-party && echo
          df -h

       ## Gleaned from https://evilmartians.com/chronicles/build-images-on-github-actions-with-docker-layer-caching
      - name: Build foundation image
        if: 'true'
        uses: docker/build-push-action@v4.1.1
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: Dockerfile
          # Set the desired build target here
          target: foundation
          push: true
          # see https://github.com/docker/build-push-action/issues/820
          platforms: linux/amd64
          tags: localhost:5000/foundation:latest
          #tags: ${{ steps.prep.outputs.tagged_image }}
          cache-from: type=local,src=${{ runner.temp }}/.buildx-cache
          # Note the mode=max here
          # More: https://github.com/moby/buildkit#--export-cache-options
          # And: https://github.com/docker/buildx#--cache-tonametypetypekeyvalue
          cache-to: type=local,mode=max,dest=${{ runner.temp }}/.buildx-cache-new

      - name: Build and export
        uses: docker/build-push-action@v4.1.1
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: Dockerfile
          # Set the desired build target here
          target: foundation
          # see https://github.com/docker/build-push-action/issues/820
          platforms: linux/amd64
          tags: foundation:latest
          outputs: type=docker,dest=${{ runner.temp }}/foundation.tar

      - name: Upload artifact
        uses: actions/upload-artifact@v3.1.2
        with:
          name: foundation
          path: ${{ runner.temp }}/foundation.tar

      ## Gleaned from https://www.hyperdx.io/blog/docker-buildx-cache-with-github-actions
      - name: Build foundation image
        if: 'false'
        uses: docker/build-push-action@v4.1.1
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: Dockerfile
          # Set the desired build target here
          target: foundation
          push: true
          # see https://github.com/docker/build-push-action/issues/820
          platforms: linux/amd64
          tags: localhost:5000/foundation:latest
          #tags: ${{ steps.prep.outputs.tagged_image }}
          cache-from: type=gha
          # Note the mode=max here
          # More: https://github.com/moby/buildkit#--export-cache-options
          # And: https://github.com/docker/buildx#--cache-tonametypetypekeyvalue
          cache-to: type=gha,mode=max

      - name: Debug docker
        if: 'false'
        run: |
          ## echo "Docker run:" && docker pull --label foundation localhost:5000/foundation && echo
          # echo "Docker ps output:" && docker ps -a && echo
          # echo "Docker buildx ls output:" && docker buildx ls && echo
          # echo "Docker images output:" && docker images --all && echo
          ## Gleaned from https://stackoverflow.com/questions/31251356/how-to-get-a-list-of-images-on-docker-registry-v2
          ## echo "List images in docker registry:" && curl -X GET https://localhost:5000/v2/_catalog | jq . && echo
          echo "List buildx-cache directories:" && ls -lah /tmp/.buildx-cache* && echo
          ls -lah /tmp/.buildx-cache*/{blobs,ingest}/sha256 && echo
          echo "Diff buildx-cache directories:"
          if [ -d /tmp/.buildx-cache-new ] ; then
            diff -r --brief /tmp/.buildx-cache /tmp/.buildx-cache-new
          fi

      - name: Move cache
        if: 'true'
        run: |
          rm -rf ${{ runner.temp }}/.buildx-cache
          mv -v ${{ runner.temp }}/.buildx-cache-new ${{ runner.temp }}/.buildx-cache

      - name: Inspect foundation
        if: 'false'
        run: |
          # docker buildx imagetools inspect localhost:5000/foundation:latest
          docker buildx imagetools inspect foundation

  lambda-base:
    runs-on: ubuntu-latest
    services:
      registry-service:
        image: registry:2
        ports:
          - 5000:5000
    #    volumes:
    #      - /opt/post-generation:/var/lib/registry
    needs: 
        - docker-registry
        - builder
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Cache Docker registry
        if: 'false'
        id: cache-registry
        uses: actions/cache@v3.3.1
        with:
          path: |
            ${{ runner.temp }}/docker-registry
            /opt/post-generation
          # Key is named differently to avoid collision
          key: ${{ runner.os }}-al2-registry-${{ github.job }}
          restore-keys: |
            ${{ runner.os }}-al2-registry

      - name: Cache downloaded software
        id: cache-3rd-party
        uses: actions/cache@v3.3.1
        with:
          path: |
            ${{ github.workspace }}/3rd-party/*
          # Key is named differently to avoid collision
          key: ${{ runner.os }}-al2-3rd-party
          restore-keys: |
            ${{ runner.os }}-al2-3rd-party

      - name: Setup Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2.7.0
        with:
          driver-opts: network=host

      - name: Cache Docker layers
        id: cache-lambda-base
        uses: actions/cache@v3.3.1
        with:
          path: |
            ${{ runner.temp }}/.buildx-cache
          # Key is named differently to avoid collision
          key: ${{ runner.os }}-al2-buildx-${{ github.job }}
          restore-keys: |
            ${{ runner.os }}-al2-buildx

      - name: Debug docker
        run: |
          echo "Docker ps output:" && docker ps -a && echo
          # echo "Docker buildx ls output:" && docker buildx ls && echo

      - name: Build lambda-base image
        if: 'true'
        uses: docker/build-push-action@v4.1.1
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: Dockerfile
          # Set the desired build target here
          target: lambda-base
          push: true
          # see https://github.com/docker/build-push-action/issues/820
          platforms: linux/amd64
          tags: localhost:5000/lambda-base:latest
          # tags: ${{ steps.prep.outputs.tagged_image }}
          cache-from: type=local,src=${{ runner.temp }}/.buildx-cache
          # Note the mode=max here
          # More: https://github.com/moby/buildkit#--export-cache-options
          # And: https://github.com/docker/buildx#--cache-tonametypetypekeyvalue
          cache-to: type=local,mode=max,dest=${{ runner.temp }}/.buildx-cache-new

      - name: Build and export
        uses: docker/build-push-action@v4.1.1
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: Dockerfile
          # Set the desired build target here
          target: lambda-base
          # see https://github.com/docker/build-push-action/issues/820
          platforms: linux/amd64
          tags: lambda-base:latest
          outputs: type=docker,dest=${{ runner.temp }}/lambda-base.tar

      ## Artifacts are automatically gzipped per https://github.com/actions/toolkit/blob/master/packages/artifact/docs/additional-information.md#is-my-artifact-compressed
      - name: Compress lambda-base.tar
        if: 'false'
        run: |
          gzip -9v ${{ runner.temp }}/lambda-base.tar

      - name: Upload artifact
        uses: actions/upload-artifact@v3.1.2
        with:
          name: lambda-base
          path: ${{ runner.temp }}/lambda-base.tar

      - name: Build lambda-base image
        if: 'false'
        uses: docker/build-push-action@v4.1.1
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: Dockerfile
          # Set the desired build target here
          target: lambda-base
          push: true
          # see https://github.com/docker/build-push-action/issues/820
          platforms: linux/amd64
          tags: localhost:5000/lambda-base:latest
          # tags: ${{ steps.prep.outputs.tagged_image }}
          cache-from: type=gha
          # Note the mode=max here
          # More: https://github.com/moby/buildkit#--export-cache-options
          # And: https://github.com/docker/buildx#--cache-tonametypetypekeyvalue
          cache-to: type=gha,mode=max

      - name: Debug docker
        if: 'false'
        run: |
          # echo "Docker ps output:" && docker ps -a && echo
          # echo "Docker buildx ls output:" && docker buildx ls && echo
          echo "Docker images output:" && docker images --all && echo

      - name: Move cache
        if: 'true'
        run: |
          rm -rf ${{ runner.temp }}/.buildx-cache
          mv -v ${{ runner.temp }}/.buildx-cache-new ${{ runner.temp }}/.buildx-cache

      - name: Inspect lambda-base
        run: |
          docker buildx imagetools inspect localhost:5000/lambda-base:latest

  builder:
    runs-on: ubuntu-latest
    services:
      registry-service:
        image: registry:2
        ports:
          - 5000:5000
    #    volumes:
    #      - /opt/post-generation:/var/lib/registry
    needs: 
        - foundation
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Debug registry list - before
        if: 'true'
        run: |
          if [ -d /opt/post-generation ] ; then
            echo "Directory listing: /opt/post-generation"
            ls -lah /opt/post-generation
          else
            echo "Directory missing: /opt/post-generation"
          fi

      - name: Cache Docker registry
        if: 'false'
        id: cache-registry
        uses: actions/cache@v3.3.1
        with:
          path: |
            /opt/post-generation
            ${{ github.workspace }}/docker-registry
          # Key is named differently to avoid collision
          key: ${{ runner.os }}-al2-registry-${{ github.job }}
          restore-keys: |
            ${{ runner.os }}-al2-registry

      - name: Debug registry list - after
        if: 'true'
        run: |
          if [ -d /opt/post-generation ] ; then
            echo "Directory listing: /opt/post-generation"
            ls -lah /opt/post-generation
          else
            echo "Directory missing: /opt/post-generation"
          fi

      - name: String concat
        if: 'false'
        ## Gleaned from https://youtu.be/msCWg2F4sck?t=241
        run: echo ${{ format('{0}/{1}', github.repository_owner, github.job) }}

      ## Gleaned from https://www.actionsbyexample.com/context-expressions.html
      - name: To JSON
        if: 'false'
        run: echo 'Job context is ${{ toJSON(job) }}'
      #-  name: From JSON
      #   env: ${{ fromJSON('{"FAVORITE_FRUIT": "APPLE", "FAVORITE_COLOR": "BLUE"}') }}
      #   run: echo "I would like a ${FAVORITE_COLOR} ${FAVORITE_FRUIT}"

      - name: Cache downloaded software
        id: cache-3rd-party
        uses: actions/cache@v3.3.1
        with:
          path: |
            ${{ github.workspace }}/3rd-party/*
          # Key is named differently to avoid collision
          key: ${{ runner.os }}-al2-3rd-party
          restore-keys: |
            ${{ runner.os }}-al2-3rd-party

      - name: Setup Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2.7.0
        with:
          driver-opts: network=host

      - name: Download foundation artifact/container
        ## Gleaned from https://docs.docker.com/build/ci/github-actions/share-image-jobs/
        uses: actions/download-artifact@v3.0.1
        with:
          name: foundation
          path: ${{ runner.temp }}

      - name: Cache Docker layers
        id: cache-builder
        uses: actions/cache@v3.3.1
        with:
          path: |
            ${{ runner.temp }}/.buildx-cache
          # Key is named differently to avoid collision
          key: ${{ runner.os }}-al2-buildx-${{ github.job }}
          restore-keys: |
            ${{ runner.os }}-al2-buildx

      - name: Load image
        run: |
          docker load --input ${{ runner.temp }}/foundation.tar
          docker image ls -a
          docker image tag foundation:latest localhost:5000/foundation:latest
          docker image push localhost:5000/foundation:latest

      - name: debug
        if: 'false'
        run: |
          pwd
          echo "List current directory:" && ls -lah && echo
          echo "List 3rd-party directory:" && ls -lah 3rd-party && echo
          echo "List buildx-cache directories:" && ls -lah /tmp/.buildx-cache* && echo
          ls -lah /tmp/.buildx-cache*/{blobs,ingest}/sha256 && echo
          echo "Diff buildx-cache directories:"
          if [ -d /tmp/.buildx-cache-new ] ; then
            diff -r --brief /tmp/.buildx-cache /tmp/.buildx-cache-new
          else
            echo
          fi
          df -h

      - name: Debug docker
        if: 'false'
        run: |
          echo "Docker ps output:" && docker ps -a && echo
          echo "Docker buildx ls output:" && docker buildx ls && echo
          echo "Docker images output:" && docker images --all && echo
          echo "Docker run:" && docker pull localhost:5000/foundation && echo

      ## Gleaned from https://github.com/docker/buildx/issues/1370
      - name: Inspect foundation
        if: 'false'
        run: |
          echo "docker buildx imagetools inspect localhost:5000/foundation:latest"
          docker buildx build -t foundation:latest --pull \
            --output=type=docker --cache-from=type=local,src=${{ runner.temp }}/.buildx-cache \
            --progress plain

      - name: Download wgrib2
        #if: steps.cache-builder.outputs.cache-hit != 'true'
        run: |
          if [ ! -f 3rd-party/wgrib2.tgz ] ; then
            make 3rd-party/wgrib2.tgz
          fi

      - name: Inspect foundation
        if: 'false'
        run: |
          docker buildx imagetools inspect localhost:5000/foundation:latest

      - name: Build builder image
        if: 'true'
        uses: docker/build-push-action@v4.1.1
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: Dockerfile
          # Set the desired build target here
          target: builder
          push: true
          # see https://github.com/docker/build-push-action/issues/820
          platforms: linux/amd64
          tags: localhost:5000/builder:latest
          #tags: ${{ steps.prep.outputs.tagged_image }}
          cache-from: type=local,src=${{ runner.temp }}/.buildx-cache
          # Note the mode=max here
          # More: https://github.com/moby/buildkit#--export-cache-options
          # And: https://github.com/docker/buildx#--cache-tonametypetypekeyvalue
          cache-to: type=local,mode=max,dest=${{ runner.temp }}/.buildx-cache-new
          ## Gleaned from https://docs.docker.com/build/ci/github-actions/named-contexts/
          build-contexts: |
            foundation=docker-image://localhost:5000/foundation:latest

      - name: Build and export
        uses: docker/build-push-action@v4.1.1
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: Dockerfile
          # Set the desired build target here
          target: builder
          # see https://github.com/docker/build-push-action/issues/820
          platforms: linux/amd64
          tags: builder:latest
          outputs: type=docker,dest=${{ runner.temp }}/builder.tar
          build-contexts: |
            foundation=docker-image://localhost:5000/foundation:latest

      - name: Upload artifact
        uses: actions/upload-artifact@v3.1.2
        with:
          name: builder
          path: ${{ runner.temp }}/builder.tar

      - name: Build builder image
        if: 'false'
        uses: docker/build-push-action@v4.1.1
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: Dockerfile
          # Set the desired build target here
          target: builder
          push: true
          # see https://github.com/docker/build-push-action/issues/820
          platforms: linux/amd64
          tags: localhost:5000/builder:latest
          #tags: ${{ steps.prep.outputs.tagged_image }}
          cache-from: type=gha
          # Note the mode=max here
          # More: https://github.com/moby/buildkit#--export-cache-options
          # And: https://github.com/docker/buildx#--cache-tonametypetypekeyvalue
          cache-to: type=gha,mode=max

      - name: Debug docker
        if: 'false'
        run: |
          echo "Docker ps output:" && docker ps -a && echo
          echo "Docker buildx ls output:" && docker buildx ls && echo
          echo "Docker images output:" && docker images --all && echo

      - name: Move cache
        if: 'false'
        run: |
          rm -rf ${{ runner.temp }}/.buildx-cache
          mv -v ${{ runner.temp }}/.buildx-cache-new ${{ runner.temp }}/.buildx-cache

      - name: Inspect foundation
        run: |
          docker buildx imagetools inspect localhost:5000/foundation:latest

      - name: Inspect builder
        run: |
          docker buildx imagetools inspect localhost:5000/builder:latest

  lambda-wgrib2:
    runs-on: ubuntu-latest
    services:
      registry-service:
        image: registry:2
        ports:
          - 5000:5000
    #    volumes:
    #      - /opt/post-generation:/var/lib/registry
    needs:
        - lambda-base
        - builder
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Cache Docker registry
        if: 'false'
        id: cache-registry
        uses: actions/cache@v3.3.1
        with:
          path: |
            /opt/post-generation
            ${{ github.workspace }}/docker-registry
          # Key is named differently to avoid collision
          key: ${{ runner.os }}-al2-registry-${{ github.job }}
          restore-keys: |
            ${{ runner.os }}-al2-registry

      - name: Cache downloaded software
        id: cache-3rd-party
        uses: actions/cache@v3.3.1
        with:
          path: |
            ${{ github.workspace }}/3rd-party/*
          # Key is named differently to avoid collision
          key: ${{ runner.os }}-al2-3rd-party
          restore-keys: |
            ${{ runner.os }}-al2-3rd-party

      - name: Download artifact
        uses: actions/download-artifact@v3.0.1
        with:
          name: lambda-base
          path: ${{ runner.temp }}

      - name: Download artifact
        uses: actions/download-artifact@v3.0.1
        with:
          name: builder
          path: ${{ runner.temp }}

      - name: Setup Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2.7.0
        with:
          driver-opts: network=host

      - name: Cache Docker layers
        uses: actions/cache@v3.3.1
        with:
          path: |
            ${{ runner.temp }}/.buildx-cache
          # Key is named differently to avoid collision
          key: ${{ runner.os }}-al2-buildx-${{ github.job }}
          restore-keys: |
            ${{ runner.os }}-al2-buildx

      - name: Load image - lambda-base
        run: |
          docker load --input ${{ runner.temp }}/lambda-base.tar
          docker image ls -a
          docker image tag lambda-base:latest localhost:5000/lambda-base:latest
          docker image push localhost:5000/lambda-base:latest

      - name: Load image - builder
        run: |
          docker load --input ${{ runner.temp }}/builder.tar
          docker image ls -a
          docker image tag builder:latest localhost:5000/builder:latest
          docker image push localhost:5000/builder:latest

      - name: Build lambda-wgrib2 image
        uses: docker/build-push-action@v4.1.1
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: Dockerfile
          # Set the desired build target here
          target: lambda-wgrib2
          push: true
          # see https://github.com/docker/build-push-action/issues/820
          platforms: linux/amd64
          tags: localhost:5000/lambda-wgrib2:latest
          #tags: ${{ steps.prep.outputs.tagged_image }}
          cache-from: type=local,src=${{ runner.temp }}/.buildx-cache
          # Note the mode=max here
          # More: https://github.com/moby/buildkit#--export-cache-options
          # And: https://github.com/docker/buildx#--cache-tonametypetypekeyvalue
          cache-to: type=local,mode=max,dest=${{ runner.temp }}/.buildx-cache-new
          ## outputs: type=docker and push can not be used together  
          # outputs: type=docker,dest=${{ runner.temp }}/lambda-wgrib2.tar
          build-contexts: |
            builder=docker-image://localhost:5000/lambda-base:latest
            builder=docker-image://localhost:5000/builder:latest

      - name: List image from BuildX
        if: 'true'
        run: |
          docker buildx ls \
            --builder ${{ steps.buildx.outputs.name }}

      - name: debug1 lambda-wgrib2
        run: |
          echo "localhost:5000/lambda-wgrib2:latest"
          docker image pull \
          localhost:5000/lambda-wgrib2:latest
      - name: debug2 lambda-wgrib2
        run: |
          docker image ls -a
      - name: debug3 lambda-wgrib2
        run: |
          echo "lambda-wgrib2:latest"
          docker image save \
          --output ${{ runner.temp }}/lambda-wgrib2.tar \
          localhost:5000/lambda-wgrib2:latest
      - name: debug4 lambda-wgrib2
        run: |
          ls -l ${{ runner.temp }}/lambda-wgrib2.tar

      - name: Upload artifact
        if: 'true'
        uses: actions/upload-artifact@v3.1.2
        with:
          name: lambda-wgrib2
          path: ${{ runner.temp }}/lambda-wgrib2.tar

      - name: Move cache
        run: |
          rm -rf ${{ runner.temp }}/.buildx-cache
          mv -v ${{ runner.temp }}/.buildx-cache-new ${{ runner.temp }}/.buildx-cache

      - name: Inspect foundation
        if: 'false'
        run: |
          docker buildx imagetools inspect localhost:5000/foundation:latest

      - name: Inspect lambda-base
        if: 'false'
        run: |
          docker buildx imagetools inspect localhost:5000/lambda-base:latest

      - name: Inspect builder
        if: 'false'
        run: |
          docker buildx imagetools inspect localhost:5000/builder:latest

  lambda-pywgrib2:
    runs-on: ubuntu-latest
    services:
      registry-service:
        image: registry:2
        ports:
          - 5000:5000
    #    volumes:
    #      - /opt/post-generation:/var/lib/registry
    needs:
        - builder
        - lambda-wgrib2
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Cache Docker registry
        if: 'false'
        id: cache-registry
        uses: actions/cache@v3.3.1
        with:
          path: |
            /opt/post-generation
            ${{ github.workspace }}/docker-registry
          # Key is named differently to avoid collision
          key: ${{ runner.os }}-al2-registry-${{ github.job }}
          restore-keys: |
            ${{ runner.os }}-al2-registry

      - name: Cache downloaded software
        id: cache-3rd-party
        uses: actions/cache@v3.3.1
        with:
          path: |
            ${{ github.workspace }}/3rd-party/*
          # Key is named differently to avoid collision
          key: ${{ runner.os }}-al2-3rd-party
          restore-keys: |
            ${{ runner.os }}-al2-3rd-party

      - name: Download artifact
        uses: actions/download-artifact@v3.0.1
        with:
          name: builder
          path: ${{ runner.temp }}

      - name: Setup Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2.7.0
        with:
          driver-opts: network=host

      - name: Cache Docker layers
        uses: actions/cache@v3.3.1
        with:
          path: |
            ${{ runner.temp }}/.buildx-cache
            ./3rd-party/pywgrib2_s.py
          # Key is named differently to avoid collision
          key: ${{ runner.os }}-al2-buildx-${{ github.job }}
          restore-keys: |
            ${{ runner.os }}-al2-buildx

      - name: Load image - builder
        run: |
          docker load --input ${{ runner.temp }}/builder.tar
          docker image ls -a
          docker image tag builder:latest localhost:5000/builder:latest
          docker image push localhost:5000/builder:latest

      - name: Download pywgrib2_s.py
        run: |
          make 3rd-party/pywgrib2_s.py

      - name: Build lambda-pywgrib2 image
        uses: docker/build-push-action@v4.1.1
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: Dockerfile
          # Set the desired build target here
          target: lambda-pywgrib2
          push: true
          # see https://github.com/docker/build-push-action/issues/820
          platforms: linux/amd64
          tags: localhost:5000/lambda-pywgrib2:latest
          #tags: ${{ steps.prep.outputs.tagged_image }}
          cache-from: type=local,src=${{ runner.temp }}/.buildx-cache
          # Note the mode=max here
          # More: https://github.com/moby/buildkit#--export-cache-options
          # And: https://github.com/docker/buildx#--cache-tonametypetypekeyvalue
          cache-to: type=local,mode=max,dest=${{ runner.temp }}/.buildx-cache-new
          build-contexts: |
            builder=docker-image://localhost:5000/builder:latest

      - name: Build and export
        if: 'false'
        uses: docker/build-push-action@v4.1.1
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: Dockerfile
          # Set the desired build target here
          target: lambda-pywgrib2
          # see https://github.com/docker/build-push-action/issues/820
          platforms: linux/amd64
          tags: lambda-pywgrib2:latest
          cache-from: type=local,src=${{ runner.temp }}/.buildx-cache-new
          outputs: type=docker,dest=${{ runner.temp }}/lambda-pywgrib2.tar
          build-contexts: |
            builder=docker-image://localhost:5000/builder:latest
            builder=docker-image://localhost:5000/lambda-pywgrib2:latest

      - name: debug1 lambda-pywgrib2
        run: |
          echo "localhost:5000/lambda-pywgrib2:latest"
          docker image pull \
          localhost:5000/lambda-pywgrib2:latest
      - name: debug2 lambda-pywgrib2
        run: |
          docker image ls -a
      - name: debug3 lambda-pywgrib2
        run: |
          echo "lambda-pywgrib2:latest"
          docker image save \
          --output ${{ runner.temp }}/lambda-pywgrib2.tar \
          localhost:5000/lambda-pywgrib2:latest
      - name: debug4 lambda-pywgrib2
        run: |
          ls -l ${{ runner.temp }}/lambda-pywgrib2.tar

      - name: Upload artifact
        if: 'true'
        uses: actions/upload-artifact@v3.1.2
        with:
          name: lambda-pywgrib2
          path: ${{ runner.temp }}/lambda-pywgrib2.tar

      - name: Move cache
        run: |
          rm -rf ${{ runner.temp }}/.buildx-cache
          mv -v ${{ runner.temp }}/.buildx-cache-new ${{ runner.temp }}/.buildx-cache

  publish:
    runs-on: ubuntu-latest
    services:
      registry-service:
        image: registry:2
        ports:
          - 5000:5000
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write
    needs:
        - lambda-wgrib2
        - lambda-pywgrib2
    # Map a step output to a job output
    outputs:
      tag: ${{ steps.vars.outputs.tag }}
      sha: ${{ steps.vars.outputs.sha }}
      repoowner: ${{ steps.vars.outputs.repoowner }}
    steps:
      - name: Set variables
        id: vars
        run: |
          # access with 'echo ${{ steps.vars.outputs.tag }}'
          echo "tag=${GITHUB_REF#refs/*/}" >> ${GITHUB_OUTPUT}
          echo "sha=${GITHUB_SHA}" >> ${GITHUB_OUTPUT}
          echo "repoowner=${GITHUB_REPOSITORY_OWNER,,}" >> ${GITHUB_OUTPUT}

      - name: Download artifact
        uses: actions/download-artifact@v3.0.1
        with:
          name: lambda-wgrib2
          path: ${{ runner.temp }}

      - name: Load image - lambda-wgrib2
        run: |
          docker load --input ${{ runner.temp }}/lambda-wgrib2.tar
          docker image ls -a
          docker image tag localhost:5000/lambda-wgrib2:latest lambda-wgrib2:latest
          docker image push localhost:5000/lambda-wgrib2:latest

      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo '$GITHUB_CONTEXT'
      - name: Dump job context
        env:
          JOB_CONTEXT: ${{ toJson(job) }}
        run: echo '$JOB_CONTEXT'
      - name: Dump steps context
        env:
          STEPS_CONTEXT: ${{ toJson(steps) }}
        run: echo '$STEPS_CONTEXT'
      - name: Dump runner context
        env:
          RUNNER_CONTEXT: ${{ toJson(runner) }}
        run: echo '$RUNNER_CONTEXT'
      - name: Actor
        run: |
          echo "Actor: ${{ github.actor }}"

      - name: Extract metadata (tags, labels) for Docker
        id: meta-wgrib2
        uses: docker/metadata-action@v4.6.0
        with:
          images: ${{ steps.vars.outputs.repoowner }}/lambda-wgrib2

      - name: Debug
        run: |
          echo '${{ github.ref_name }}'
          echo '${{ toJSON(steps.meta-wgrib2.outputs) }}'

      - name: Download artifact
        uses: actions/download-artifact@v3.0.1
        with:
          name: lambda-pywgrib2
          path: ${{ runner.temp }}

      - name: Load image - lambda-pywgrib2
        run: |
          docker load --input ${{ runner.temp }}/lambda-pywgrib2.tar
          docker image ls -a
          docker image tag localhost:5000/lambda-pywgrib2:latest lambda-pywgrib2:latest
          docker image push localhost:5000/lambda-pywgrib2:latest

      - name: Extract metadata (tags, labels) for Docker
        id: meta-pywgrib2
        uses: docker/metadata-action@v4.6.0
        with:
          images: ${{ steps.vars.outputs.repoowner }}/lambda-pywgrib2

      - name: Debug
        run: |
          echo '${{ toJSON(steps.meta-pywgrib2.outputs) }}'

      # Extract metadata (tags, labels) for Docker lambda-wgrib2
      # https://github.com/docker/metadata-action
      - name: Extract metadata (tags, labels) for Docker lambda-wgrib2
        id: meta-wgrib2-b
        uses: docker/metadata-action@v4.6.0
        with:
          images: ${{ env.REGISTRY }}/${{ steps.vars.outputs.repoowner }}/lambda-wgrib2
          labels: |
            org.opencontainers.image.description=Build of lambda-wgrib2 from AWS Lambda image
            org.opencontainers.image.title=lambda-wgrib2
          tags: |
            # minimal (short sha)
            type=sha
            # full length sha
            type=sha,format=long
            type=ref,event=branch
            type=semver,pattern=v{{version}}

      # Extract metadata (tags, labels) for Docker lambda-pywgrib2
      # https://github.com/docker/metadata-action
      - name: Extract metadata (tags, labels) for Docker lambda-pywgrib2
        id: meta-pywgrib2-b
        uses: docker/metadata-action@v4.6.0
        with:
          images: ${{ env.REGISTRY }}/${{ steps.vars.outputs.repoowner }}/lambda-pywgrib2
          labels: |
            org.opencontainers.image.description=Build of lambda-pywgrib2 from AWS Python Lambda image
            org.opencontainers.image.title=lambda-pywgrib2
          tags: |
            # minimal (short sha)
            type=sha
            # full length sha
            type=sha,format=long
            type=ref,event=branch
            type=semver,pattern=v{{version}}

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        #if: github.event_name != 'pull_request'
        uses: docker/login-action@v2.2.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2.7.0
        with:
          driver-opts: network=host

      - name: Checkout
        uses: actions/checkout@v3

      - name: Build and publish lambda-wgrib2 image
        if: 'false'
        uses: docker/build-push-action@v4.1.1
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: Dockerfile
          # Set the desired build target here
          target: lambda-wgrib2
          push: true
          #push: github.event_name != 'pull_request'
          # see https://github.com/docker/build-push-action/issues/820
          platforms: linux/amd64
          labels: ${{ steps.meta-wgrib2-b.outputs.labels }}
          #tags: localhost:5000/lambda-wgrib2:latest
          tags: ${{ steps.meta-wgrib2-b.outputs.tags }}
          #cache-from: type=local,src=${{ runner.temp }}/.buildx-cache
          # Note the mode=max here
          # More: https://github.com/moby/buildkit#--export-cache-options
          # And: https://github.com/docker/buildx#--cache-tonametypetypekeyvalue
          #cache-to: type=local,mode=max,dest=${{ runner.temp }}/.buildx-cache-new
          ## outputs: type=docker and push can not be used together  
          # outputs: type=docker,dest=${{ runner.temp }}/lambda-wgrib2.tar
          build-contexts: |
            builder=docker-image://localhost:5000/lambda-wgrib2:latest

      - name: Build and publish lambda-pywgrib2 image
        uses: docker/build-push-action@v4.1.1
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: Dockerfile
          # Set the desired build target here
          target: lambda-pywgrib2
          push: true
          #push: github.event_name != 'pull_request'
          # see https://github.com/docker/build-push-action/issues/820
          platforms: linux/amd64
          labels: ${{ steps.meta-pywgrib2-b.outputs.labels }}
          #tags: localhost:5000/lambda-pywgrib2:latest
          tags: ${{ steps.meta-pywgrib2-b.outputs.tags }}
          #cache-from: type=local,src=${{ runner.temp }}/.buildx-cache
          # Note the mode=max here
          # More: https://github.com/moby/buildkit#--export-cache-options
          # And: https://github.com/docker/buildx#--cache-tonametypetypekeyvalue
          #cache-to: type=local,mode=max,dest=${{ runner.temp }}/.buildx-cache-new
          ## outputs: type=docker and push can not be used together  
          # outputs: type=docker,dest=${{ runner.temp }}/lambda-wgrib2.tar
          build-contexts: |
            builder=docker-image://localhost:5000/lambda-pywgrib2:latest

  ## Gleaned from https://docs.github.com/en/actions/using-jobs/defining-outputs-for-jobs
  job1:
    runs-on: ubuntu-latest
    # Map a step output to a job output
    outputs:
      output1: ${{ steps.step1.outputs.test }}
      output2: ${{ steps.step2.outputs.test }}
      output3: ${{ steps.step3.outputs.jstext }}
    steps:
      - id: step1
        run: echo "test=hello" >> "$GITHUB_OUTPUT"
      - id: step2
        run: echo "test=world" >> "$GITHUB_OUTPUT"
      - id: step3
        run: echo "jstext='{\"image\":\"lambda-wgrib2\",\"base\":{\"image\":\"public.ecr.aws/lambda/provided\",\"version\":\"al2.2023.03.21.13-x86_64\"},\"software\":{\"wgrib2\":\"v3.1.2\",\"pywgrib2_s\":null}}'" >> "$GITHUB_OUTPUT"
  job2:
    runs-on: ubuntu-latest
    needs: job1
    steps:
      - name: Debug
        run: |
          echo '${{ toJSON(needs.job1) }}'
      - env:
          OUTPUT1: ${{needs.job1.outputs.output1}}
          OUTPUT2: ${{needs.job1.outputs.output2}}
        #  JSONBLOCK: ${{needs.job1.outputs.output3}}
        run: |
          echo "$OUTPUT1 $OUTPUT2"
        #  echo "$JSONBLOCK" | jq .
