name: New buildx Docker Image CI

on:
  push:
    branches:
      - main
    paths-ignore:
      - .github/workflows/*.yml
  pull_request:
    branches:
      - main
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

## Gleaned from https://yonatankra.com/7-github-actions-tricks-i-wish-i-knew-before-i-started/#6_Saving_Computation_Time_by_Stopping_Obsolete_Workflows
concurrency:
  group: ci-tests-${{ github.ref }}-1
  cancel-in-progress: true

jobs:
    ## Gleaned from https://docs.docker.com/build/ci/github-actions/local-registry/
  docker-registry:
    runs-on: ubuntu-latest
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
        volumes:
          - /tmp/docker-registry:/var/lib/registry
    steps:
      - name: Checkout
        uses: actions/checkout@v3
            
      - name: Cache Docker registry
        if: 'true'
        id: cache-registry
        uses: actions/cache@v1.2.1
        with:
          path: |
            /tmp/docker-registry
          # Key is named differently to avoid collision
          key: ${{ runner.os }}-al2-registry-${{ github.job }}
          restore-keys: |
            ${{ runner.os }}-al2-registry
            
  foundation:
    runs-on: ubuntu-latest
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
        volumes:
          - /tmp/docker-registry:/var/lib/registry
    needs: 
      - docker-registry
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Cache Docker registry
        id: cache-registry
        uses: actions/cache@v1.2.1
        with:
          path: |
            /tmp/docker-registry
          # Key is named differently to avoid collision
          key: ${{ runner.os }}-al2-registry-${{ github.job }}
          restore-keys: |
            ${{ runner.os }}-al2-registry
              
      - name: Cache downloaded software
        id: cache-3rd-party
        uses: actions/cache@v1.2.1
        with:
          path: |
            ${{ github.workspace }}/3rd-party/*
          # Key is named differently to avoid collision
          key: ${{ runner.os }}-al2-3rd-party
          restore-keys: |
            ${{ runner.os }}-al2-3rd-party
              
      - name: Setup Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2.7.0
        with:
          driver-opts: network=host
          buildkitd-flags: --debug

      - name: Cache Docker layers
        id: cache-foundation
        uses: actions/cache@v1.2.1
        with:
          path: |
            /tmp/.buildx-cache
          # Key is named differently to avoid collision
          key: ${{ runner.os }}-al2-buildx-${{ github.job }}
          restore-keys: |
            ${{ runner.os }}-al2-buildx
              
      - name: debug
        if: 'false'
        run: |
          echo "Current directory:" && pwd && echo
          echo "List current directory:" && ls -lah && echo
          echo "List 3rd-party directory:" && ls -lah 3rd-party && echo
          echo "List buildx-cache directories:" && ls -lah /tmp/.buildx-cache* && echo
          ls -lah /tmp/.buildx-cache*/{blobs,ingest}/sha256 && echo
          echo "Diff buildx-cache directories:"
          if [ -d /tmp/.buildx-cache-new ] ; then
            diff -r --brief /tmp/.buildx-cache /tmp/.buildx-cache-new
          else
            echo
          fi
          df -h
            
      - name: Download cmake
        if: steps.cache-3rd-party.outputs.cache-hit != 'true'
        run: |
          if [ ! -f 3rd-party/cmake.tgz ] ; then
            make 3rd-party/cmake.tgz
          fi
          
      - name: Upload cmake.tgz
        uses: actions/upload-artifact@v2
        with:
          name: cached-cmake.tgz
          path: 3rd-party/cmake.tgz
        
      - name: debug
        if: 'true'
        run: |
          pwd
          echo "List current directory:" && ls -lah && echo
          echo "List 3rd-party directory:" && ls -lah 3rd-party && echo
          df -h
            
      - name: Build foundation image
        if: 'true'
        uses: docker/build-push-action@v4.1.1
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: Dockerfile
          # Set the desired build target here
          target: foundation
          push: true
          tags: localhost:5000/foundation:latest
          #tags: ${{ steps.prep.outputs.tagged_image }}
          cache-from: type=local,src=/tmp/.buildx-cache
          # Note the mode=max here
          # More: https://github.com/moby/buildkit#--export-cache-options
          # And: https://github.com/docker/buildx#--cache-tonametypetypekeyvalue
          cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-new
          
      - name: Build and export
        uses: docker/build-push-action@v4.1.1
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: Dockerfile
          # Set the desired build target here
          target: foundation
          tags: foundation:latest
          outputs: type=docker,dest=/tmp/foundation.tar
          
      - name: Upload artifact
        uses: actions/upload-artifact@v3.1.2
        with:
          name: foundation
          path: /tmp/foundation.tar

      ## Gleaned from https://www.hyperdx.io/blog/docker-buildx-cache-with-github-actions
      - name: Build foundation image
        if: 'false'
        uses: docker/build-push-action@v4.1.1
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: Dockerfile
          # Set the desired build target here
          target: foundation
          push: true
          tags: localhost:5000/foundation:latest
          #tags: ${{ steps.prep.outputs.tagged_image }}
          cache-from: type=gha
          # Note the mode=max here
          # More: https://github.com/moby/buildkit#--export-cache-options
          # And: https://github.com/docker/buildx#--cache-tonametypetypekeyvalue
          cache-to: type=gha,mode=max

      - name: Debug docker
        if: 'false'
        run: |
          ## echo "Docker run:" && docker pull --label foundation localhost:5000/foundation && echo
          # echo "Docker ps output:" && docker ps -a && echo
          # echo "Docker buildx ls output:" && docker buildx ls && echo
          # echo "Docker images output:" && docker images --all && echo
          ## Gleaned from https://stackoverflow.com/questions/31251356/how-to-get-a-list-of-images-on-docker-registry-v2
          ## echo "List images in docker registry:" && curl -X GET https://localhost:5000/v2/_catalog | jq . && echo
          echo "List buildx-cache directories:" && ls -lah /tmp/.buildx-cache* && echo
          ls -lah /tmp/.buildx-cache*/{blobs,ingest}/sha256 && echo
          echo "Diff buildx-cache directories:"
          if [ -d /tmp/.buildx-cache-new ] ; then
            diff -r --brief /tmp/.buildx-cache /tmp/.buildx-cache-new
          fi
            
      - name: Move cache
        if: 'true'
        run: |
          rm -rf /tmp/.buildx-cache
          mv -v /tmp/.buildx-cache-new /tmp/.buildx-cache
        
      - name: Inspect foundation
        if: 'false'
        run: |
          # docker buildx imagetools inspect localhost:5000/foundation:latest
          docker buildx imagetools inspect foundation
      
       ## Gleaned from https://github.com/marketplace/actions/docker-extract
  #    - name: Extract from Docker image
  #      uses: shrink/actions-docker-extract@v2
  #      id: extract-cmake
  #      with:
  #        image: "localhost:5000/foundation"
  #        path: "cmake-*"  # file or directory you want out
  #    
  #    - name: Upload cmake-cache artifact
  #      uses: actions/upload-artifact@v2
  #      with:
  #        path: ${{ steps.extract-cmake.outputs.destination }}
  #        name: cmake-cache
  #
  #    - name: Upload a Build Artifact
  #      uses: actions/upload-artifact@v3.1.2
  #      with:
  #        # Artifact name
  #        name: cmake-3.19.8-build # optional, default is artifact
  #        # A file, directory or wildcard pattern that describes what to upload
  #        path: cmake-3.19.8
  #        # The desired behavior if no files are found using the provided path.
  #        # Available Options:
  #        #   warn: Output a warning but do not fail the action
  #        #   error: Fail the action with an error message
  #        #   ignore: Do not output any warnings or errors, the action does not fail
  #        if-no-files-found: ignore # optional, default is warn
  #        # Duration after which artifact will expire in days. 0 means using default retention.
  #        # Minimum 1 day. Maximum 90 days unless changed from the repository settings page.
  #        # retention-days: # optional
    
  lambda-base:
    runs-on: ubuntu-latest
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
        volumes:
          - /tmp/docker-registry:/var/lib/registry
    needs: 
        - docker-registry
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        
      - name: Cache Docker registry
        id: cache-registry
        uses: actions/cache@v1.2.1
        with:
          path: |
            /tmp/docker-registry
          # Key is named differently to avoid collision
          key: ${{ runner.os }}-al2-registry-${{ github.job }}
          restore-keys: |
            ${{ runner.os }}-al2-registry
            
      - name: Cache downloaded software
        id: cache-3rd-party
        uses: actions/cache@v1.2.1
        with:
          path: |
            ${{ github.workspace }}/3rd-party/*
          # Key is named differently to avoid collision
          key: ${{ runner.os }}-al2-3rd-party
          restore-keys: |
            ${{ runner.os }}-al2-3rd-party
            
      - name: Setup Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2.7.0
        with:
          driver-opts: network=host

      - name: Cache Docker layers
        id: cache-lambda-base
        uses: actions/cache@v1.2.1
        with:
          path: |
            /tmp/.buildx-cache
          # Key is named differently to avoid collision
          key: ${{ runner.os }}-al2-buildx-${{ github.job }}
          restore-keys: |
            ${{ runner.os }}-al2-buildx
            
      - name: Debug docker
        run: |
          echo "Docker ps output:" && docker ps -a && echo
          # echo "Docker buildx ls output:" && docker buildx ls && echo

      - name: Build lambda-base image
        if: 'true'
        uses: docker/build-push-action@v4.1.1
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: Dockerfile
          # Set the desired build target here
          target: lambda-base
          push: true
          tags: localhost:5000/lambda-base:latest
          # tags: ${{ steps.prep.outputs.tagged_image }}
          cache-from: type=local,src=/tmp/.buildx-cache
          # Note the mode=max here
          # More: https://github.com/moby/buildkit#--export-cache-options
          # And: https://github.com/docker/buildx#--cache-tonametypetypekeyvalue
          cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-new
          
      - name: Build and export
        uses: docker/build-push-action@v4.1.1
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: Dockerfile
          # Set the desired build target here
          target: lambda-base
          tags: lambda-base:latest
          outputs: type=docker,dest=/tmp/lambda-base.tar
          
      - name: Compress lambda-base.tar
        run: |
          gzip -9v /tmp/lambda-base.tar
          
      - name: Upload artifact
        uses: actions/upload-artifact@v3.1.2
        with:
          name: lambda-base
          path: /tmp/lambda-base.tar.gz
      
      - name: Build lambda-base image
        if: 'false'
        uses: docker/build-push-action@v4.1.1
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: Dockerfile
          # Set the desired build target here
          target: lambda-base
          push: true
          tags: localhost:5000/lambda-base:latest
          # tags: ${{ steps.prep.outputs.tagged_image }}
          cache-from: type=gha
          # Note the mode=max here
          # More: https://github.com/moby/buildkit#--export-cache-options
          # And: https://github.com/docker/buildx#--cache-tonametypetypekeyvalue
          cache-to: type=gha,mode=max

      - name: Debug docker
        if: 'false'
        run: |
          # echo "Docker ps output:" && docker ps -a && echo
          # echo "Docker buildx ls output:" && docker buildx ls && echo
          echo "Docker images output:" && docker images --all && echo
          
      - name: Move cache
        if: 'true'
        run: |
          rm -rf /tmp/.buildx-cache
          mv -v /tmp/.buildx-cache-new /tmp/.buildx-cache
      
      - name: Inspect lambda-base
        run: |
          docker buildx imagetools inspect localhost:5000/lambda-base:latest

  builder:
    runs-on: ubuntu-latest
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
        volumes:
          - /tmp/docker-registry:/var/lib/registry
    needs: 
        - foundation
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        
      - name: Debug registry list - before
        if: 'true'
        run: |
          if [ -d /tmp/docker-registry ] ; then
            echo "Directory listing: /tmp/docker-registry"
            ls -lah /tmp/docker-registry
          else
            echo "Directory missing: /tmp/docker-registry"
          fi
        
      - name: Cache Docker registry
        if: 'true'
        id: cache-registry
        uses: actions/cache@v1.2.1
        with:
          path: |
            /tmp/docker-registry
          # Key is named differently to avoid collision
          key: ${{ runner.os }}-al2-registry-${{ github.job }}
          restore-keys: |
            ${{ runner.os }}-al2-registry
      
      - name: Debug registry list - after
        if: 'true'
        run: |
          if [ -d /tmp/docker-registry ] ; then
            echo "Directory listing: /tmp/docker-registry"
            ls -lah /tmp/docker-registry
          else
            echo "Directory missing: /tmp/docker-registry"
          fi
          
      - name: String concat
        if: 'false'
        ## Gleaned from https://youtu.be/msCWg2F4sck?t=241
        run: echo ${{ format('{0}/{1}', github.repository_owner, github.job) }}
        
      ## Gleaned from https://www.actionsbyexample.com/context-expressions.html
      - name: To JSON
        if: 'false'
        run: echo 'Job context is ${{ toJSON(job) }}'
      #-  name: From JSON
      #   env: ${{ fromJSON('{"FAVORITE_FRUIT": "APPLE", "FAVORITE_COLOR": "BLUE"}') }}
      #   run: echo "I would like a ${FAVORITE_COLOR} ${FAVORITE_FRUIT}"
            
      - name: Cache downloaded software
        id: cache-3rd-party
        uses: actions/cache@v1.2.1
        with:
          path: |
            ${{ github.workspace }}/3rd-party/*
          # Key is named differently to avoid collision
          key: ${{ runner.os }}-al2-3rd-party
          restore-keys: |
            ${{ runner.os }}-al2-3rd-party
            
      - name: Setup Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2.7.0
        with:
          driver-opts: network=host
          
      - name: Download foundation artifact/container
        ## Gleaned from https://docs.docker.com/build/ci/github-actions/share-image-jobs/
        uses: actions/download-artifact@v2.1.1
        with:
          name: foundation
          path: /tmp

      - name: Cache Docker layers
        id: cache-builder
        uses: actions/cache@v1.2.1
        with:
          path: |
            /tmp/.buildx-cache
          # Key is named differently to avoid collision
          key: ${{ runner.os }}-al2-buildx-${{ github.job }}
          restore-keys: |
            ${{ runner.os }}-al2-buildx
            
      - name: Load image
        run: |
          docker load --input /tmp/foundation.tar
          docker image ls -a
          docker image tag foundation:latest localhost:5000/foundation:latest
          docker image push localhost:5000/foundation:latest
                          
      - name: debug
        if: 'false'
        run: |
          pwd
          echo "List current directory:" && ls -lah && echo
          echo "List 3rd-party directory:" && ls -lah 3rd-party && echo
          echo "List buildx-cache directories:" && ls -lah /tmp/.buildx-cache* && echo
          ls -lah /tmp/.buildx-cache*/{blobs,ingest}/sha256 && echo
          echo "Diff buildx-cache directories:"
          if [ -d /tmp/.buildx-cache-new ] ; then
            diff -r --brief /tmp/.buildx-cache /tmp/.buildx-cache-new
          else
            echo
          fi
          df -h
    
      - name: Debug docker
        if: 'false'
        run: |
          echo "Docker ps output:" && docker ps -a && echo
          echo "Docker buildx ls output:" && docker buildx ls && echo
          echo "Docker images output:" && docker images --all && echo
          echo "Docker run:" && docker pull localhost:5000/foundation && echo
      
      ## Gleaned from https://github.com/docker/buildx/issues/1370
      - name: Inspect foundation
        if: 'false'
        run: |
          echo "docker buildx imagetools inspect localhost:5000/foundation:latest"
          docker buildx build -t foundation:latest --pull \
            --output=type=docker --cache-from=type=local,src=/tmp/.buildx-cache \
            --progress plain
          
      - name: Download wgrib2
        #if: steps.cache-builder.outputs.cache-hit != 'true'
        run: |
          if [ ! -f 3rd-party/wgrib2.tgz ] ; then
            make 3rd-party/wgrib2.tgz
          fi

      - name: Inspect foundation
        if: 'false'
        run: |
          docker buildx imagetools inspect localhost:5000/foundation:latest
          
      - name: Build builder image
        if: 'true'
        uses: docker/build-push-action@v4.1.1
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: Dockerfile
          # Set the desired build target here
          target: builder
          push: true
          tags: localhost:5000/builder:latest
          #tags: ${{ steps.prep.outputs.tagged_image }}
          cache-from: type=local,src=/tmp/.buildx-cache
          # Note the mode=max here
          # More: https://github.com/moby/buildkit#--export-cache-options
          # And: https://github.com/docker/buildx#--cache-tonametypetypekeyvalue
          cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-new
          ## Gleaned from https://docs.docker.com/build/ci/github-actions/named-contexts/
          build-contexts: |
            foundation=docker-image://localhost:5000/foundation:latest
            
      - name: Build and export
        uses: docker/build-push-action@v4.1.1
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: Dockerfile
          # Set the desired build target here
          target: builder
          tags: builder:latest
          outputs: type=docker,dest=/tmp/builder.tar
          build-contexts: |
            foundation=docker-image://localhost:5000/foundation:latest
          
      - name: List builder.tar - before
        run: |
          ls -lh /tmp/builder.tar
          
      - name: Compress builder.tar
        run: |
          gzip -9v /tmp/builder.tar
          
      - name: List builder.tar - after
        run: |
          ls -lh /tmp/builder.tar.gz
          
      - name: Upload artifact
        uses: actions/upload-artifact@v3.1.2
        with:
          name: builder
          path: /tmp/builder.tar.gz
          
      - name: Build builder image
        if: 'false'
        uses: docker/build-push-action@v4.1.1
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: Dockerfile
          # Set the desired build target here
          target: builder
          push: true
          tags: localhost:5000/builder:latest
          #tags: ${{ steps.prep.outputs.tagged_image }}
          cache-from: type=gha
          # Note the mode=max here
          # More: https://github.com/moby/buildkit#--export-cache-options
          # And: https://github.com/docker/buildx#--cache-tonametypetypekeyvalue
          cache-to: type=gha,mode=max

      - name: Debug docker
        if: 'false'
        run: |
          echo "Docker ps output:" && docker ps -a && echo
          echo "Docker buildx ls output:" && docker buildx ls && echo
          echo "Docker images output:" && docker images --all && echo
          
      - name: Move cache
        if: 'false'
        run: |
          rm -rf /tmp/.buildx-cache
          mv -v /tmp/.buildx-cache-new /tmp/.buildx-cache
      
      - name: Inspect foundation
        run: |
          docker buildx imagetools inspect localhost:5000/foundation:latest

      - name: Inspect builder
        run: |
          docker buildx imagetools inspect localhost:5000/builder:latest

  lambda-wgrib2:
    runs-on: ubuntu-latest
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
        volumes:
        - /tmp/docker-registry:/var/lib/registry
    needs:
        - lambda-base
        - builder
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        
      - name: Cache Docker registry
        id: cache-registry
        uses: actions/cache@v1.2.1
        with:
          path: |
            /tmp/docker-registry
          # Key is named differently to avoid collision
          key: ${{ runner.os }}-al2-registry-${{ github.job }}
          restore-keys: |
            ${{ runner.os }}-al2-registry
            
      - name: Cache downloaded software
        id: cache-3rd-party
        uses: actions/cache@v1.2.1
        with:
          path: |
            ${{ github.workspace }}/3rd-party/*
          # Key is named differently to avoid collision
          key: ${{ runner.os }}-al2-3rd-party
          restore-keys: |
            ${{ runner.os }}-al2-3rd-party
            
      - name: Download artifact
        uses: actions/download-artifact@v2.1.1
        with:
          name: lambda-base
          path: /tmp
          
      - name: Download artifact
        uses: actions/download-artifact@v2.1.1
        with:
          name: builder
          path: /tmp
            
      - name: Setup Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2.7.0
        with:
          driver-opts: network=host

      - name: Cache Docker layers
        uses: actions/cache@v1.2.1
        with:
          path: |
            /tmp/.buildx-cache
          # Key is named differently to avoid collision
          key: ${{ runner.os }}-al2-buildx-${{ github.job }}
          restore-keys: |
            ${{ runner.os }}-al2-buildx
            
      - name: Load image - lambda-base
        run: |
          gzip -dv /tmp/lambda-base.tar.gz
          docker load --input /tmp/lambda-base.tar
          docker image ls -a
          docker image tag lambda-base:latest localhost:5000/lambda-base:latest
          docker image push localhost:5000/lambda-base:latest
          
      - name: Load image - builder
        run: |
          gzip -dv /tmp/builder.tar.gz
          docker load --input /tmp/builder.tar
          docker image ls -a
          docker image tag builder:latest localhost:5000/builder:latest
          docker image push localhost:5000/builder:latest

      - name: Build lambda-wgrib2 image
        uses: docker/build-push-action@v4.1.1
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: Dockerfile
          # Set the desired build target here
          target: lambda-wgrib2
          push: true
          tags: localhost:5000/lambda-wgrib2:latest
          #tags: ${{ steps.prep.outputs.tagged_image }}
          cache-from: type=local,src=/tmp/.buildx-cache
          # Note the mode=max here
          # More: https://github.com/moby/buildkit#--export-cache-options
          # And: https://github.com/docker/buildx#--cache-tonametypetypekeyvalue
          cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-new
          build-contexts: |
            builder=docker-image://localhost:5000/lambda-base:latest
            builder=docker-image://localhost:5000/builder:latest

      - name: Build and export
        uses: docker/build-push-action@v4.1.1
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: Dockerfile
          # Set the desired build target here
          target: lambda-wgrib2
          tags: lambda-wgrib2:latest
          outputs: type=docker,dest=/tmp/lambda-wgrib2.tar

      - name: Compress lambda-wgrib2.tar
        run: |
          gzip -9v /tmp/lambda-wgrib2.tar

      - name: Upload artifact
        uses: actions/upload-artifact@v3.1.2
        with:
          name: lambda-wgrib2
          path: /tmp/lambda-wgrib2.tar.gz

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv -v /tmp/.buildx-cache-new /tmp/.buildx-cache
                
      - name: Inspect foundation
        if: 'false'
        run: |
          docker buildx imagetools inspect localhost:5000/foundation:latest
      
      - name: Inspect lambda-base
        if: 'false'
        run: |
          docker buildx imagetools inspect localhost:5000/lambda-base:latest

      - name: Inspect builder
        if: 'false'
        run: |
          docker buildx imagetools inspect localhost:5000/builder:latest
          
      - name: Inspect lambda-wgrib2
        run: |
          docker buildx imagetools inspect localhost:5000/lambda-wgrib2:latest

  lambda-pywgrib2:
    runs-on: ubuntu-latest
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
        volumes:
        - /tmp/docker-registry:/var/lib/registry
    needs:
        - builder
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        
      - name: Cache Docker registry
        id: cache-registry
        uses: actions/cache@v1.2.1
        with:
          path: |
            /tmp/docker-registry
          # Key is named differently to avoid collision
          key: ${{ runner.os }}-al2-registry-${{ github.job }}
          restore-keys: |
            ${{ runner.os }}-al2-registry
            
      - name: Cache downloaded software
        id: cache-3rd-party
        uses: actions/cache@v1.2.1
        with:
          path: |
            ${{ github.workspace }}/3rd-party/*
          # Key is named differently to avoid collision
          key: ${{ runner.os }}-al2-3rd-party
          restore-keys: |
            ${{ runner.os }}-al2-3rd-party
            
      - name: Download artifact
        uses: actions/download-artifact@v2.1.1
        with:
          name: builder
          path: /tmp
            
      - name: Setup Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2.7.0
        with:
          driver-opts: network=host

      - name: Cache Docker layers
        uses: actions/cache@v1.2.1
        with:
          path: |
            /tmp/.buildx-cache
            ./3rd-party/pywgrib2_s.py
          # Key is named differently to avoid collision
          key: ${{ runner.os }}-al2-buildx-${{ github.job }}
          restore-keys: |
            ${{ runner.os }}-al2-buildx

      - name: Load image - builder
        run: |
          gzip -dv /tmp/builder.tar.gz
          docker load --input /tmp/builder.tar
          docker image ls -a
          docker image tag builder:latest localhost:5000/builder:latest
          docker image push localhost:5000/builder:latest
      
      - name: Download pywgrib2_s.py
        run: |
          make 3rd-party/pywgrib2_s.py

      - name: Build lambda-pywgrib2 image
        uses: docker/build-push-action@v4.1.1
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: Dockerfile
          # Set the desired build target here
          target: lambda-pywgrib2
          push: true
          tags: localhost:5000/lambda-pywgrib2:latest
          #tags: ${{ steps.prep.outputs.tagged_image }}
          cache-from: type=local,src=/tmp/.buildx-cache
          # Note the mode=max here
          # More: https://github.com/moby/buildkit#--export-cache-options
          # And: https://github.com/docker/buildx#--cache-tonametypetypekeyvalue
          cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-new
          build-contexts: |
            builder=docker-image://localhost:5000/builder:latest

      - name: Build and export
        uses: docker/build-push-action@v4.1.1
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: Dockerfile
          # Set the desired build target here
          target: lambda-pywgrib2
          tags: lambda-pywgrib2:latest
          outputs: type=docker,dest=/tmp/lambda-pywgrib2.tar

      - name: Compress lambda-pywgrib2.tar
        run: |
          gzip -9v /tmp/lambda-pywgrib2.tar

      - name: Upload artifact
        uses: actions/upload-artifact@v3.1.2
        with:
          name: lambda-pywgrib2
          path: /tmp/lambda-pywgrib2.tar.gz

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv -v /tmp/.buildx-cache-new /tmp/.buildx-cache
