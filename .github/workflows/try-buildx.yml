name: buildx monolithic Docker Image CI/CD

on:
  push:
    branches:
      - main
    # Publish semver tags as releases.
    tags: [ 'v4.*.*' ]
  pull_request:
    branches:
      - main
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

## Gleaned from https://yonatankra.com/7-github-actions-tricks-i-wish-i-knew-before-i-started/#6_Saving_Computation_Time_by_Stopping_Obsolete_Workflows
concurrency:
  group: ci-tests-${{ github.ref }}-1
  cancel-in-progress: true

env:
  # Use docker.io for Docker Hub if empty
  GHREGISTRY: ghcr.io

jobs:
  foundation:
    runs-on: ubuntu-latest
    services:
      registry-service:
        image: registry:2
        ports:
          - 5000:5000
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Cache downloaded software
        if: 'false'
        id: cache-3rd-party
        uses: actions/cache@v3.3.1
        with:
          path: |
            ${{ github.workspace }}/3rd-party/*
          # Key is named differently to avoid collision
          key: ${{ runner.os }}-al2-3rd-party
          restore-keys: |
            ${{ runner.os }}-al2-3rd-party

      - name: Setup Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2.7.0
        with:
          driver-opts: network=host
          buildkitd-flags: --debug

      - name: Cache Docker layers
        if: 'false'
        id: cache-foundation
        uses: actions/cache@v3.3.1
        with:
          path: |
            ${{ runner.temp }}/.buildx-cache
          # Key is named differently to avoid collision
          key: ${{ runner.os }}-al2-buildx-${{ github.job }}
          restore-keys: |
            ${{ runner.os }}-al2-buildx-${{ github.job }}
            ${{ runner.os }}-al2-buildx-

      - name: Download cmake
        if: steps.cache-3rd-party.outputs.cache-hit != 'true'
        run: |
          if [ ! -f 3rd-party/cmake.tgz ] ; then
            make 3rd-party/cmake.tgz
          fi

      - name: Upload cmake.tgz
        if: 'false'
        uses: actions/upload-artifact@v3.1.2
        with:
          name: cached-cmake.tgz
          path: 3rd-party/cmake.tgz

       ## Gleaned from https://evilmartians.com/chronicles/build-images-on-github-actions-with-docker-layer-caching
      - name: Build foundation image
        if: 'false'
        uses: docker/build-push-action@v4.1.1
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: Dockerfile
          # Set the desired build target here
          target: foundation
          push: true
          # see https://github.com/docker/build-push-action/issues/820
          platforms: linux/amd64
          tags: localhost:5000/foundation:latest
          #tags: ${{ steps.prep.outputs.tagged_image }}
          cache-from: type=local,src=${{ runner.temp }}/.buildx-cache
          # Note the mode=max here
          # More: https://github.com/moby/buildkit#--export-cache-options
          # And: https://github.com/docker/buildx#--cache-tonametypetypekeyvalue
          cache-to: type=local,mode=max,dest=${{ runner.temp }}/.buildx-cache-new

      - name: Build and export
        if: 'false'
        uses: docker/build-push-action@v4.1.1
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: Dockerfile
          # Set the desired build target here
          target: foundation
          # see https://github.com/docker/build-push-action/issues/820
          platforms: linux/amd64
          tags: foundation:latest
          outputs: type=docker,dest=${{ runner.temp }}/foundation.tar

      - name: Upload artifact
        if: 'false'
        uses: actions/upload-artifact@v3.1.2
        with:
          name: foundation
          path: ${{ runner.temp }}/foundation.tar

      ## Gleaned from https://www.hyperdx.io/blog/docker-buildx-cache-with-github-actions
      - name: Build foundation image - gha
        if: 'true'
        uses: docker/build-push-action@v4.1.1
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: Dockerfile
          # Set the desired build target here
          target: foundation
          push: true
          # see https://github.com/docker/build-push-action/issues/820
          platforms: linux/amd64
          tags: localhost:5000/foundation:latest
          #tags: ${{ steps.prep.outputs.tagged_image }}
          cache-from: type=gha
          # Note the mode=max here
          # More: https://github.com/moby/buildkit#--export-cache-options
          # And: https://github.com/docker/buildx#--cache-tonametypetypekeyvalue
          cache-to: type=gha,mode=max

      - name: Move cache after foundation build
        if: 'false'
        run: |
          rm -rf ${{ runner.temp }}/.buildx-cache
          mv -v ${{ runner.temp }}/.buildx-cache-new ${{ runner.temp }}/.buildx-cache

#  lambda-base:

      - name: Build lambda-base image
        if: 'false'
        uses: docker/build-push-action@v4.1.1
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: Dockerfile
          # Set the desired build target here
          target: lambda-base
          push: true
          # see https://github.com/docker/build-push-action/issues/820
          platforms: linux/amd64
          tags: localhost:5000/lambda-base:latest
          # tags: ${{ steps.prep.outputs.tagged_image }}
          cache-from: type=local,src=${{ runner.temp }}/.buildx-cache
          # Note the mode=max here
          # More: https://github.com/moby/buildkit#--export-cache-options
          # And: https://github.com/docker/buildx#--cache-tonametypetypekeyvalue
          cache-to: type=local,mode=max,dest=${{ runner.temp }}/.buildx-cache-new

      - name: Build and export
        if: 'false'
        uses: docker/build-push-action@v4.1.1
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: Dockerfile
          # Set the desired build target here
          target: lambda-base
          # see https://github.com/docker/build-push-action/issues/820
          platforms: linux/amd64
          tags: lambda-base:latest
          outputs: type=docker,dest=${{ runner.temp }}/lambda-base.tar

      - name: Upload artifact
        if: 'false'
        uses: actions/upload-artifact@v3.1.2
        with:
          name: lambda-base
          path: ${{ runner.temp }}/lambda-base.tar

      - name: Build lambda-base image - gha
        if: 'true'
        uses: docker/build-push-action@v4.1.1
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: Dockerfile
          # Set the desired build target here
          target: lambda-base
          push: true
          # see https://github.com/docker/build-push-action/issues/820
          platforms: linux/amd64
          tags: localhost:5000/lambda-base:latest
          # tags: ${{ steps.prep.outputs.tagged_image }}
          cache-from: type=gha
          # Note the mode=max here
          # More: https://github.com/moby/buildkit#--export-cache-options
          # And: https://github.com/docker/buildx#--cache-tonametypetypekeyvalue
          cache-to: type=gha,mode=max

      - name: Move cache
        if: 'false'
        run: |
          rm -rf ${{ runner.temp }}/.buildx-cache
          mv -v ${{ runner.temp }}/.buildx-cache-new ${{ runner.temp }}/.buildx-cache

#  builder:

      - name: Download wgrib2
        #if: steps.cache-builder.outputs.cache-hit != 'true'
        run: |
          if [ ! -f 3rd-party/wgrib2.tgz ] ; then
            make 3rd-party/wgrib2.tgz
          fi

      - name: Build builder image
        if: 'false'
        uses: docker/build-push-action@v4.1.1
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: Dockerfile
          # Set the desired build target here
          target: builder
          push: true
          # see https://github.com/docker/build-push-action/issues/820
          platforms: linux/amd64
          tags: localhost:5000/builder:latest
          #tags: ${{ steps.prep.outputs.tagged_image }}
          cache-from: type=local,src=${{ runner.temp }}/.buildx-cache
          # Note the mode=max here
          # More: https://github.com/moby/buildkit#--export-cache-options
          # And: https://github.com/docker/buildx#--cache-tonametypetypekeyvalue
          cache-to: type=local,mode=max,dest=${{ runner.temp }}/.buildx-cache-new
          ## Gleaned from https://docs.docker.com/build/ci/github-actions/named-contexts/
          build-contexts: |
            foundation=docker-image://localhost:5000/foundation:latest

      - name: Build and export
        if: 'false'
        uses: docker/build-push-action@v4.1.1
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: Dockerfile
          # Set the desired build target here
          target: builder
          # see https://github.com/docker/build-push-action/issues/820
          platforms: linux/amd64
          tags: builder:latest
          outputs: type=docker,dest=${{ runner.temp }}/builder.tar
          build-contexts: |
            foundation=docker-image://localhost:5000/foundation:latest

      - name: Upload artifact
        if: 'false'
        uses: actions/upload-artifact@v3.1.2
        with:
          name: builder
          path: ${{ runner.temp }}/builder.tar

      - name: Build builder image - gha
        if: 'true'
        uses: docker/build-push-action@v4.1.1
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: Dockerfile
          # Set the desired build target here
          target: builder
          push: true
          # see https://github.com/docker/build-push-action/issues/820
          platforms: linux/amd64
          tags: localhost:5000/builder:latest
          #tags: ${{ steps.prep.outputs.tagged_image }}
          cache-from: type=gha
          # Note the mode=max here
          # More: https://github.com/moby/buildkit#--export-cache-options
          # And: https://github.com/docker/buildx#--cache-tonametypetypekeyvalue
          cache-to: type=gha,mode=max

      - name: Move cache
        if: 'false'
        run: |
          rm -rf ${{ runner.temp }}/.buildx-cache
          mv -v ${{ runner.temp }}/.buildx-cache-new ${{ runner.temp }}/.buildx-cache

  publish:
    runs-on: ubuntu-latest
    services:
      registry-service:
        image: registry:2
        ports:
          - 5000:5000
    permissions:
      contents: write
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write
    needs:
      - foundation
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Download artifact
        if: 'false'
        uses: actions/download-artifact@v3.0.1
        with:
          name: builder
          path: ${{ runner.temp }}

      - name: Download artifact
        if: 'false'
        uses: actions/download-artifact@v3.0.1
        with:
          name: lambda-base
          path: ${{ runner.temp }}

      - name: Download cmake
        if: 'true'
        run: |
          if [ ! -f 3rd-party/cmake.tgz ] ; then
            make 3rd-party/cmake.tgz
          fi

      - name: Download wgrib2 and pywgrib2_s.py
        run: |
          if [ ! -f 3rd-party/wgrib2.tgz ] ; then
            make 3rd-party/wgrib2.tgz
          fi
          if [ ! -f 3rd-party/pywgrib2_s.py ] ; then
            make 3rd-party/pywgrib2_s.py
          fi
          ls -l 3rd-party
          if [ -f 3rd-party/pywgrib2_s/pywgrib2_s.py ] ; then
            ls -l 3rd-party/pywgrib2_s/pywgrib2_s.py
            echo
            tar -tvzpf 3rd-party/pywgrib2_s.tgz
          fi
          
      - name: Setup Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2.7.0
        with:
          driver-opts: network=host

      - name: Load image - builder
        if: 'false'
        run: |
          docker load --input ${{ runner.temp }}/builder.tar
          docker image ls -a
          docker image tag builder:latest localhost:5000/builder:latest
          docker image push localhost:5000/builder:latest

      - name: Load image - lambda-base
        if: 'false'
        run: |
          docker load --input ${{ runner.temp }}/lambda-base.tar
          docker image ls -a
          docker image tag lambda-base:latest localhost:5000/lambda-base:latest
          docker image push localhost:5000/lambda-base:latest

      - name: Build lambda-wgrib2 image
        if: 'false'
        uses: docker/build-push-action@v4.1.1
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: Dockerfile
          # Set the desired build target here
          target: lambda-wgrib2
          push: true
          # see https://github.com/docker/build-push-action/issues/820
          platforms: linux/amd64
          tags: localhost:5000/lambda-wgrib2:latest
          #tags: ${{ steps.prep.outputs.tagged_image }}
          cache-from: type=local,src=${{ runner.temp }}/.buildx-cache
          # Note the mode=max here
          # More: https://github.com/moby/buildkit#--export-cache-options
          # And: https://github.com/docker/buildx#--cache-tonametypetypekeyvalue
          cache-to: type=local,mode=max,dest=${{ runner.temp }}/.buildx-cache-new
          ## outputs: type=docker and push can not be used together
          # outputs: type=docker,dest=${{ runner.temp }}/lambda-wgrib2.tar
          build-contexts: |
            builder=docker-image://localhost:5000/lambda-base:latest
            builder=docker-image://localhost:5000/builder:latest

      - name: Upload artifact
        if: 'false'
        uses: actions/upload-artifact@v3.1.2
        with:
          name: lambda-wgrib2
          path: ${{ runner.temp }}/lambda-wgrib2.tar

      - name: Build builder image - gha
        if: 'true'
        uses: docker/build-push-action@v4.1.1
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: Dockerfile
          # Set the desired build target here
          target: lambda-wgrib2
          push: true
          # see https://github.com/docker/build-push-action/issues/820
          platforms: linux/amd64
          tags: localhost:5000/lambda-wgrib2:latest
          #tags: ${{ steps.prep.outputs.tagged_image }}
          cache-from: type=gha
          # Note the mode=max here
          # More: https://github.com/moby/buildkit#--export-cache-options
          # And: https://github.com/docker/buildx#--cache-tonametypetypekeyvalue
          cache-to: type=gha,mode=max

      - name: Move cache
        if: 'false'
        run: |
          rm -rf ${{ runner.temp }}/.buildx-cache
          mv -v ${{ runner.temp }}/.buildx-cache-new ${{ runner.temp }}/.buildx-cache

      - name: Build lambda-pywgrib2 image
        if: 'false'
        uses: docker/build-push-action@v4.1.1
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: Dockerfile
          # Set the desired build target here
          target: lambda-pywgrib2
          push: true
          # see https://github.com/docker/build-push-action/issues/820
          platforms: linux/amd64
          tags: localhost:5000/lambda-pywgrib2:latest
          #tags: ${{ steps.prep.outputs.tagged_image }}
          cache-from: type=local,src=${{ runner.temp }}/.buildx-cache
          # Note the mode=max here
          # More: https://github.com/moby/buildkit#--export-cache-options
          # And: https://github.com/docker/buildx#--cache-tonametypetypekeyvalue
          cache-to: type=local,mode=max,dest=${{ runner.temp }}/.buildx-cache-new
          build-contexts: |
            builder=docker-image://localhost:5000/builder:latest

      - name: Upload artifact
        if: 'false'
        uses: actions/upload-artifact@v3.1.2
        with:
          name: lambda-pywgrib2
          path: ${{ runner.temp }}/lambda-pywgrib2.tar

      - name: Build builder image - gha
        if: 'true'
        uses: docker/build-push-action@v4.1.1
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: Dockerfile
          # Set the desired build target here
          target: lambda-pywgrib2
          push: true
          # see https://github.com/docker/build-push-action/issues/820
          platforms: linux/amd64
          tags: localhost:5000/lambda-pywgrib2:latest
          #tags: ${{ steps.prep.outputs.tagged_image }}
          cache-from: type=gha
          # Note the mode=max here
          # More: https://github.com/moby/buildkit#--export-cache-options
          # And: https://github.com/docker/buildx#--cache-tonametypetypekeyvalue
          cache-to: type=gha,mode=max

      - name: Move cache
        if: 'false'
        run: |
          rm -rf ${{ runner.temp }}/.buildx-cache
          mv -v ${{ runner.temp }}/.buildx-cache-new ${{ runner.temp }}/.buildx-cache

      - name: Set variables
        id: vars
        run: |
          # access with 'echo ${{ steps.vars.outputs.tag }}'
          echo "${GITHUB_REF} tag=${GITHUB_REF#refs/*/}"
          echo "tag=${GITHUB_REF#refs/*/}" >> ${GITHUB_OUTPUT}
          echo "sha=${GITHUB_SHA}"
          echo "sha=${GITHUB_SHA}" >> ${GITHUB_OUTPUT}
          echo "repoowner=${GITHUB_REPOSITORY_OWNER,,}"
          echo "repoowner=${GITHUB_REPOSITORY_OWNER,,}" >> ${GITHUB_OUTPUT}

      # Extract metadata (tags, labels) for Docker lambda-wgrib2
      # https://github.com/docker/metadata-action
      - name: Extract metadata (tags, labels) for Docker
        id: meta-wgrib2
        uses: docker/metadata-action@v4.6.0
        with:
          images: ${{ env.GHREGISTRY }}/${{ steps.vars.outputs.repoowner }}/lambda-wgrib2
          labels: |
            org.opencontainers.image.description=Build of lambda-wgrib2 from AWS Lambda image
            org.opencontainers.image.title=lambda-wgrib2
          tags: |
            # minimal (short sha)
            type=sha
            # full length sha
            type=sha,format=long
            #type=ref,event=branch
            type=semver,pattern=v{{version}}

      - name: Set shortsha variable
        id: shavar
        run: |
          echo "shortsha=${DOCKER_METADATA_OUTPUT_VERSION}"
          echo "shortsha=${DOCKER_METADATA_OUTPUT_VERSION}" >> ${GITHUB_OUTPUT}
          
      - name: Debug variables
        id: debugmetavars
        env:
          GWTAGS:   ${{ toJSON(steps.meta-wgrib2.outputs.tags) }}
          GWLABELS: ${{ toJSON(steps.meta-wgrib2.outputs.labels) }}
        run: |
          echo "${DOCKER_METADATA_OUTPUT_VERSION}"
          echo "meta-wgrib2 shortsha"
          echo "${{ steps.shavar.outputs.shortsha }}"
          echo "meta-wgrib2 tags"
          echo "${GWTAGS}"
          echo "meta-wgrib2 labels"
          echo "${GWLABELS}"

      # Extract metadata (tags, labels) for Docker lambda-pywgrib2
      # https://github.com/docker/metadata-action
      - name: Extract metadata (tags, labels) for Docker
        id: meta-pywgrib2
        uses: docker/metadata-action@v4.6.0
        with:
          images: ${{ env.GHREGISTRY }}/${{ steps.vars.outputs.repoowner }}/lambda-pywgrib2
          labels: |
            org.opencontainers.image.description=Build of lambda-pywgrib2 from AWS Python Lambda image
            org.opencontainers.image.title=lambda-pywgrib2
          tags: |
            # minimal (short sha)
            type=sha
            # full length sha
            type=sha,format=long
            #type=ref,event=branch
            type=semver,pattern=v{{version}}

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.GHREGISTRY }}
        #if: github.event_name != 'pull_request'
        uses: docker/login-action@v2.2.0
        with:
          registry: ${{ env.GHREGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and publish lambda-wgrib2 image
        if: 'false'
        uses: docker/build-push-action@v4.1.1
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: Dockerfile
          # Set the desired build target here
          target: lambda-wgrib2
          push: false
          #push: github.event_name != 'pull_request'
          # see https://github.com/docker/build-push-action/issues/820
          platforms: linux/amd64
          labels: ${{ steps.meta-wgrib2.outputs.labels }}
          #tags: localhost:5000/lambda-wgrib2:latest
          tags: ${{ steps.meta-wgrib2.outputs.tags }}
          cache-from: type=local,src=${{ runner.temp }}/.buildx-cache
          # Note the mode=max here
          # More: https://github.com/moby/buildkit#--export-cache-options
          # And: https://github.com/docker/buildx#--cache-tonametypetypekeyvalue
          #cache-to: type=local,mode=max,dest=${{ runner.temp }}/.buildx-cache-new
          ## outputs: type=docker and push can not be used together
          # outputs: type=docker,dest=${{ runner.temp }}/lambda-wgrib2.tar
          build-contexts: |
            builder=docker-image://localhost:5000/builder:latest
            builder=docker-image://localhost:5000/lambda-wgrib2:latest

      - name: Build and publish lambda-wgrib2 image - gha
        if: 'true'
        uses: docker/build-push-action@v4.1.1
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: Dockerfile
          # Set the desired build target here
          target: lambda-wgrib2
          push: true
          #push: github.event_name != 'pull_request'
          # see https://github.com/docker/build-push-action/issues/820
          platforms: linux/amd64
          labels: ${{ steps.meta-wgrib2.outputs.labels }}
          #tags: localhost:5000/lambda-wgrib2:latest
          tags: ${{ steps.meta-wgrib2.outputs.tags }}
          cache-from: type=gha

      - name: Build and export
        if: 'true'
        uses: docker/build-push-action@v4.1.1
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: Dockerfile
          # Set the desired build target here
          target: lambda-wgrib2
          # see https://github.com/docker/build-push-action/issues/820
          platforms: linux/amd64
          labels: ${{ steps.meta-wgrib2.outputs.labels }}
          tags: ${{ steps.meta-wgrib2.outputs.tags }}
          cache-from: type=gha
          outputs: type=docker,dest=${{ runner.temp }}/lambda-wgrib2_${{ steps.shavar.outputs.shortsha }}.tar

      - name: Upload artifact
        if: 'true'
        uses: actions/upload-artifact@v3.1.2
        with:
          name: lambda-wgrib2_${{ steps.shavar.outputs.shortsha }}.tar
          path: ${{ runner.temp }}/lambda-wgrib2_${{ steps.shavar.outputs.shortsha }}.tar
      
      - name: Build and publish lambda-pywgrib2 image
        if: 'false'
        uses: docker/build-push-action@v4.1.1
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: Dockerfile
          # Set the desired build target here
          target: lambda-pywgrib2
          push: false
          #push: github.event_name != 'pull_request'
          # see https://github.com/docker/build-push-action/issues/820
          platforms: linux/amd64
          labels: ${{ steps.meta-pywgrib2.outputs.labels }}
          #tags: localhost:5000/lambda-pywgrib2:latest
          tags: ${{ steps.meta-pywgrib2.outputs.tags }}
          cache-from: type=local,src=${{ runner.temp }}/.buildx-cache
          # Note the mode=max here
          # More: https://github.com/moby/buildkit#--export-cache-options
          # And: https://github.com/docker/buildx#--cache-tonametypetypekeyvalue
          #cache-to: type=local,mode=max,dest=${{ runner.temp }}/.buildx-cache-new
          ## outputs: type=docker and push can not be used together
          # outputs: type=docker,dest=${{ runner.temp }}/lambda-pywgrib2.tar
          build-contexts: |
            builder=docker-image://localhost:5000/builder:latest
            builder=docker-image://localhost:5000/lambda-pywgrib2:latest

      - name: Build and publish lambda-pywgrib2 image - gha
        if: 'true'
        uses: docker/build-push-action@v4.1.1
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: Dockerfile
          # Set the desired build target here
          target: lambda-pywgrib2
          push: true
          #push: github.event_name != 'pull_request'
          # see https://github.com/docker/build-push-action/issues/820
          platforms: linux/amd64
          labels: ${{ steps.meta-pywgrib2.outputs.labels }}
          #tags: localhost:5000/lambda-pywgrib2:latest
          tags: ${{ steps.meta-pywgrib2.outputs.tags }}
          cache-from: type=gha

      - name: Build and export
        if: 'true'
        uses: docker/build-push-action@v4.1.1
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: Dockerfile
          # Set the desired build target here
          target: lambda-pywgrib2
          # see https://github.com/docker/build-push-action/issues/820
          platforms: linux/amd64
          labels: ${{ steps.meta-pywgrib2.outputs.labels }}
          tags: ${{ steps.meta-pywgrib2.outputs.tags }}
          cache-from: type=gha
          outputs: type=docker,dest=${{ runner.temp }}/lambda-pywgrib2_${{ steps.shavar.outputs.shortsha }}.tar

      - name: Upload artifact
        if: 'false'
        uses: actions/upload-artifact@v3.1.2
        with:
          name: lambda-pywgrib2_${{ steps.shavar.outputs.shortsha }}.tar
          path: ${{ runner.temp }}/lambda-pywgrib2_${{ steps.shavar.outputs.shortsha }}.tar

      - name: Extract pywgrib2_s.py
        if: 'true'
        uses: shrink/actions-docker-extract@v2
        id: extract-py
        with:
          image: ${{ env.GHREGISTRY }}/${{ steps.vars.outputs.repoowner }}/lambda-pywgrib2:${{ steps.shavar.outputs.shortsha }}
          destination: ${{ github.workspace }}/pylambda-layer/opt/wgrib2/lib/python
          path: /opt/wgrib2/lib/python/pywgrib2_s.py

      - name: Extract libwgrib2.so
        if: 'true'
        uses: shrink/actions-docker-extract@v2
        id: extract-lib
        with:
          image: ${{ env.GHREGISTRY }}/${{ steps.vars.outputs.repoowner }}/lambda-pywgrib2:${{ steps.shavar.outputs.shortsha }}
          destination: ${{ github.workspace }}/pylambda-layer/var/lang/lib
          path: /var/lang/lib/libwgrib2.so

      - name: Debug
        if: 'true'
        run: |
          ls -lR ${{ github.workspace }}/pylambda-layer

      - name: Upload Python Lambda layer
        if: 'false'
        uses: actions/upload-artifact@v3
        with:
          name: pylambda-layer_${{ steps.shavar.outputs.shortsha }}
          path: ${{ runner.temp }}/pylambda-layer/*/*

      - name: Download artifact - pylambda-layer_${{ steps.shavar.outputs.shortsha }}
        if: 'false'
        uses: actions/download-artifact@v3.0.1
        with:
          name: pylambda-layer_${{ steps.shavar.outputs.shortsha }}
          path: ${{ runner.temp }}
          
      - name: Create Zip for Python Lambda layer
        uses: vimtor/action-zip@v1.1
        with:
          recursive: true
          # /home/runner/work/packaging-wgrib2/packaging-wgrib2
          files: pylambda-layer/
          dest: pylambda-layer_${{ steps.shavar.outputs.shortsha }}.zip
            
      - name: Debug
        run: |
          ls -l ${{ runner.temp }}/lambda-*_${{ steps.shavar.outputs.shortsha }}.tar \
                ${{ github.workspace }}/pylambda-layer_${{ steps.shavar.outputs.shortsha }}.zip
          echo
          unzip -t pylambda-layer_${{ steps.shavar.outputs.shortsha }}.zip
          echo
          ls -lR ${{ github.workspace }}/pylambda-layer

      - name: Create Release
        uses: ncipollo/release-action@v1.13.0
        with:
          allowUpdates: true
          prerelease: true
          draft: true
          tag: test
          artifacts: ${{ runner.temp }}/lambda-*_${{ steps.shavar.outputs.shortsha }}.tar,${{ github.workspace }}/pylambda-layer_${{ steps.shavar.outputs.shortsha }}.zip
